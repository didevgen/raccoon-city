{"version":3,"sources":["graphql/mutations/contactMutation.ts","components/shared/components/inputs/EditableTextField.tsx","components/Main/Contacts/Contact/ContactForm.tsx","components/Main/Contacts/Contact/Notes.tsx","components/Main/Contacts/Contact/Contact.tsx","components/Main/Contacts/Contacts.tsx","components/shared/components/tabs/TabPanel.tsx","components/shared/components/dialogs/ConfirmDialog.tsx","graphql/queries/contactQuery.ts","components/Main/Trades/Trade/components/index.tsx"],"names":["CREATE_CONTACT","gql","UPDATE_CONTACT","DELETE_CONTACT","FieldWrapper","styled","div","StyledTextField","TextField","Label","withStyles","theme","disabled","borderBottom","classes","label","value","inputProps","useState","editMode","setEditMode","ref","useRef","inputRef","name","margin","fullWidth","onChange","onBlur","InputProps","endAdornment","InputAdornment","position","IconButton","className","onClick","current","setTimeout","focus","ContactFormWrapper","TitleArea","TabContainer","Paper","OptionsArea","TitleWrapper","OptionIcon","ButtonWrapper","StyledList","List","SingleValue","data","CustomOption","props","innerProps","innerRef","selectOption","ListItem","alignItems","ListItemText","primary","role","displayName","Divider","variant","component","ContactForm","onClose","contact","developerUuid","useParams","React","setValue","useQuery","GET_USERS","loading","error","GET_CONTACT_DROPDOWNS","dropdowns","dropdownsLoading","useMutation","mutation","initialValues","clientStatus","clientStatuses","find","key","phones","handleChange","event","newValue","mutators","arrayMutators","subscription","invalid","values","onSubmit","aria-label","validate","isRequired","defaultValue","input","Tabs","indicatorColor","textColor","centered","Tab","TabPanel","index","Grid","container","spacing","item","xs","id","options","getUsers","selectedValue","isClearable","components","Option","fields","map","justify","alignContent","preferredCountries","regions","defaultCountry","push","undefined","color","remove","KeyDisplayNameOptions","SingleDisplayName","Button","a","variables","responsible","uuid","__typename","refetchQueries","query","ALL_CONTACTS","Notes","ContactsWrapper","Transition","forwardRef","Slide","direction","Contact","open","handleClose","GET_CONTACT","fetchPolicy","skip","Dialog","fullScreen","TransitionComponent","getContact","Contacts","connect","dispatch","applyParams","params","setRouteParams","applyTitle","title","setTitle","useEffect","deleteMutation","setOpen","contactUuid","setContact","Container","maxWidth","Typography","gutterBottom","columns","width","field","render","rowData","confirmFn","phone","i","localization","header","actions","icon","tooltip","isFreeAction","getAllContacts","Toolbar","children","other","hidden","aria-labelledby","p","Confirmation","callbackFn","setCallbackFn","callback","ConfirmDialog","text","cancel","accept","heading","mainText","autoFocus","preventDefault","stopPropagation","TradeStateOptions"],"mappings":"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","file":"static/js/20.1b164c93.chunk.js","sourcesContent":["import {gql} from 'apollo-boost';\n\nexport const CREATE_CONTACT = gql`\n    mutation createContact($developerUuid: String!, $contact: ContactInput!) {\n        createContact(developerUuid: $developerUuid, contact: $contact) {\n            id\n        }\n    }\n`;\n\nexport const UPDATE_CONTACT = gql`\n    mutation updateContact($uuid: String!, $contact: ContactInput!) {\n        updateContact(uuid: $uuid, contact: $contact) {\n            id\n        }\n    }\n`;\n\nexport const DELETE_CONTACT = gql`\n    mutation deleteContact($uuid: String!) {\n        deleteContact(uuid: $uuid)\n    }\n`;\n","import IconButton from '@material-ui/core/IconButton';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport {withStyles} from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Edit from '@material-ui/icons/Edit';\nimport React, {useRef, useState} from 'react';\nimport styled from 'styled-components';\n\nconst FieldWrapper = styled.div`\n    display: flex;\n    align-items: center;\n`;\nconst StyledTextField = styled(TextField)`\n    margin: 0 !important;\n`;\nconst Label = styled.div`\n    margin-right: 8px;\n    white-space: nowrap;\n`;\nconst styles = (theme) => ({\n    disabled: {\n        borderBottom: 0,\n        '&:before': {\n            borderBottom: 0\n        }\n    }\n});\n\nfunction EditableTextField({classes, value, label, inputProps, ...props}) {\n    const [editMode, setEditMode] = useState(false);\n    const ref: any = useRef();\n    const handleChange = () => {};\n    return (\n        <FieldWrapper>\n            {label && <Label>{label}</Label>}\n            <StyledTextField\n                inputRef={ref}\n                name=\"email\"\n                margin=\"normal\"\n                fullWidth\n                onChange={handleChange}\n                disabled={!editMode}\n                onBlur={() => {\n                    setEditMode(false);\n                }}\n                InputProps={{\n                    classes: {\n                        disabled: classes.disabled\n                    },\n                    endAdornment: (\n                        <InputAdornment position=\"end\">\n                            <IconButton\n                                className=\"EditIcon\"\n                                onClick={() => {\n                                    setEditMode(true);\n                                    if (ref.current) {\n                                        setTimeout(() => {\n                                            ref.current.focus();\n                                        });\n                                    }\n                                }}\n                            >\n                                <Edit />\n                            </IconButton>\n                        </InputAdornment>\n                    )\n                }}\n                {...inputProps}\n            />\n        </FieldWrapper>\n    );\n}\n\nexport default withStyles(styles as any)(EditableTextField);\n","import {useMutation, useQuery} from '@apollo/react-hooks';\nimport Select from '@appgeist/react-select-material-ui';\nimport {Button, Grid, IconButton, ListItem, Paper, Tab, Tabs, TextField} from '@material-ui/core';\nimport Divider from '@material-ui/core/Divider';\nimport List from '@material-ui/core/List';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport arrayMutators from 'final-form-arrays';\nimport MuiPhoneNumber from 'material-ui-phone-number';\nimport React from 'react';\nimport {Field, Form} from 'react-final-form';\nimport {FieldArray} from 'react-final-form-arrays';\nimport {useParams} from 'react-router-dom';\nimport styled from 'styled-components';\nimport {isRequired} from '../../../../core/validators/validators';\nimport {CREATE_CONTACT, UPDATE_CONTACT} from '../../../../graphql/mutations/contactMutation';\nimport {ALL_CONTACTS, GET_CONTACT_DROPDOWNS} from '../../../../graphql/queries/contactQuery';\nimport {GET_USERS} from '../../../../graphql/queries/userQuery';\nimport EditableTextField from '../../../shared/components/inputs/EditableTextField';\nimport {TabPanel} from '../../../shared/components/tabs/TabPanel';\nimport {KeyDisplayNameOptions, SingleDisplayName} from '../../Trades/Trade/components';\n\nconst ContactFormWrapper = styled.div`\n    width: 40%;\n    background-color: #fff;\n    border-right: 3px solid #dbdbdb;\n`;\n\nconst TitleArea = styled.div`\n    height: 30%;\n    max-height: 240px;\n    background-color: #37485c;\n    color: #fff;\n    display: flex;\n    flex-direction: column;\n`;\n\nconst TabContainer = styled(Paper)`\n    box-shadow: none;\n    background-color: #37485c !important;\n    .MuiButtonBase--root {\n        color: #fff !important;\n    }\n    .MuiTab-textColorPrimary {\n        color: #fff !important;\n    }\n    .MuiTabs-indicator {\n        background-color: #fff !important;\n    }\n    margin-top: auto;\n`;\n\nconst OptionsArea = styled.div`\n    display: flex;\n    justify-content: space-between;\n`;\n\nconst TitleWrapper = styled.div`\n    display: flex;\n    height: 100%;\n    align-items: center;\n    justify-content: center;\n\n    .MuiInputBase-input,\n    .EditIcon {\n        font-size: 24px;\n        line-height: 24px;\n        color: #fff;\n    }\n`;\n\nconst OptionIcon: any = styled(IconButton)`\n    &.MuiIconButton-root {\n        color: white !important;\n    }\n`;\n\nconst ButtonWrapper = styled.div`\n    padding: 16px;\n`;\nconst StyledList = styled(List)`\n    display: flex;\n    padding: 8px !important;\n    align-items: center;\n    margin-left: 8px;\n    &:hover {\n        background-color: rgba(0, 0, 0, 0.08);\n        cursor: pointer;\n    }\n`;\n\nfunction SingleValue({data}: any) {\n    return data.name;\n}\n\nfunction CustomOption(props: any) {\n    const {innerProps, data, innerRef} = props;\n    return (\n        <StyledList\n            ref={innerRef}\n            {...innerProps}\n            onClick={() => {\n                props.selectOption(data);\n            }}\n        >\n            <ListItem alignItems=\"flex-start\">\n                <ListItemText primary={data.name} />\n                <ListItemText primary={data?.role?.displayName} />\n            </ListItem>\n            <Divider variant=\"inset\" component=\"li\" />\n        </StyledList>\n    );\n}\n\nexport function ContactForm({onClose, contact}) {\n    const {developerUuid} = useParams();\n    const [value, setValue] = React.useState(0);\n    const {data, loading, error} = useQuery(GET_USERS);\n    const {data: dropdowns, loading: dropdownsLoading} = useQuery(GET_CONTACT_DROPDOWNS);\n\n    const [mutation] = useMutation(contact ? UPDATE_CONTACT : CREATE_CONTACT);\n    if (loading || error || dropdownsLoading) {\n        return null;\n    }\n    const initialValues = contact\n        ? {\n              ...contact,\n              clientStatus: dropdowns.clientStatuses.find(({key}) => key === contact.clientStatus)\n          }\n        : {\n              phones: ['']\n          };\n\n    const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\n        setValue(newValue);\n    };\n\n    return (\n        <Form\n            initialValues={initialValues}\n            mutators={{\n                ...arrayMutators\n            }}\n            subscription={{invalid: true, values: true}}\n            onSubmit={() => {\n                // silence\n            }}\n        >\n            {({values, invalid}) => {\n                return (\n                    <ContactFormWrapper>\n                        <TitleArea>\n                            <OptionsArea>\n                                <OptionIcon\n                                    aria-label=\"upload picture\"\n                                    component=\"span\"\n                                    onClick={() => {\n                                        onClose();\n                                    }}\n                                >\n                                    <ArrowBackIcon />\n                                </OptionIcon>\n                                <OptionIcon aria-label=\"upload picture\" component=\"span\">\n                                    <SettingsIcon />\n                                </OptionIcon>\n                            </OptionsArea>\n                            <TitleWrapper>\n                                <Field name=\"name\" validate={isRequired} defaultValue=\"Имя Фамилия\">\n                                    {(props) => {\n                                        return <EditableTextField inputProps={props.input} />;\n                                    }}\n                                </Field>\n                            </TitleWrapper>\n                            <TabContainer>\n                                <Tabs\n                                    value={value}\n                                    onChange={handleChange}\n                                    indicatorColor=\"primary\"\n                                    textColor=\"primary\"\n                                    centered\n                                >\n                                    <Tab label=\"Основное\" />\n                                    <Tab label=\"Сделки\" />\n                                </Tabs>\n                            </TabContainer>\n                        </TitleArea>\n                        <TabPanel value={value} index={0}>\n                            <Grid container spacing={3}>\n                                <Grid item xs={12}>\n                                    <Field name=\"responsible\" validate={isRequired}>\n                                        {(props) => (\n                                            <Select\n                                                id=\"place\"\n                                                label=\"Ответственный *\"\n                                                options={data.getUsers}\n                                                value={props.input.value}\n                                                onChange={(selectedValue: any) => {\n                                                    props.input.onChange(selectedValue);\n                                                }}\n                                                isClearable={true}\n                                                components={{\n                                                    Option: CustomOption,\n                                                    SingleValue\n                                                }}\n                                            />\n                                        )}\n                                    </Field>\n                                </Grid>\n                                <Grid item xs={12}>\n                                    <FieldArray name=\"phones\">\n                                        {({fields}) =>\n                                            fields.map((name, index) => (\n                                                <Grid\n                                                    container={true}\n                                                    key={name}\n                                                    spacing={3}\n                                                    justify=\"center\"\n                                                    alignItems=\"center\"\n                                                    alignContent=\"center\"\n                                                >\n                                                    <Grid item={true} xs={9}>\n                                                        <Field name={name} validate={isRequired}>\n                                                            {(props) => (\n                                                                <MuiPhoneNumber\n                                                                    name={props.input.name}\n                                                                    value={props.input.value}\n                                                                    onChange={props.input.onChange}\n                                                                    fullWidth\n                                                                    preferredCountries={['ua']}\n                                                                    regions={'europe'}\n                                                                    defaultCountry=\"ua\"\n                                                                    label={`Раб телефон (${index + 1}) *`}\n                                                                    variant=\"outlined\"\n                                                                />\n                                                            )}\n                                                        </Field>\n                                                    </Grid>\n                                                    <Grid item xs={3}>\n                                                        <IconButton\n                                                            onClick={() => {\n                                                                fields.push(undefined);\n                                                            }}\n                                                            color=\"primary\"\n                                                            aria-label=\"upload picture\"\n                                                            component=\"span\"\n                                                        >\n                                                            <AddCircleIcon />\n                                                        </IconButton>\n                                                        {index > 0 && (\n                                                            <IconButton\n                                                                color=\"secondary\"\n                                                                onClick={() => {\n                                                                    fields.remove(index);\n                                                                }}\n                                                                aria-label=\"upload picture\"\n                                                                component=\"span\"\n                                                            >\n                                                                <CancelIcon />\n                                                            </IconButton>\n                                                        )}\n                                                    </Grid>\n                                                </Grid>\n                                            ))\n                                        }\n                                    </FieldArray>\n                                </Grid>\n                                <Grid item xs={12}>\n                                    <Field name=\"clientStatus\">\n                                        {(props) => (\n                                            <Select\n                                                id=\"place\"\n                                                label=\"Статус клиента\"\n                                                options={dropdowns.clientStatuses}\n                                                value={props.input.value}\n                                                onChange={(selectedValue: any) => {\n                                                    props.input.onChange(selectedValue);\n                                                }}\n                                                isClearable={true}\n                                                components={{\n                                                    Option: KeyDisplayNameOptions,\n                                                    SingleValue: SingleDisplayName\n                                                }}\n                                            />\n                                        )}\n                                    </Field>\n                                </Grid>\n                                <Grid item xs={12}>\n                                    <Field name=\"position\">\n                                        {(props) => {\n                                            return (\n                                                <TextField\n                                                    name={props.input.name}\n                                                    value={props.input.value}\n                                                    onChange={props.input.onChange}\n                                                    fullWidth\n                                                    label=\"Должность\"\n                                                    variant=\"outlined\"\n                                                />\n                                            );\n                                        }}\n                                    </Field>\n                                </Grid>\n                                <Grid item xs={12}>\n                                    <Field name=\"email\">\n                                        {(props) => {\n                                            return (\n                                                <TextField\n                                                    name={props.input.name}\n                                                    value={props.input.value}\n                                                    onChange={props.input.onChange}\n                                                    fullWidth\n                                                    label=\"Email\"\n                                                    variant=\"outlined\"\n                                                />\n                                            );\n                                        }}\n                                    </Field>\n                                </Grid>\n                            </Grid>\n                        </TabPanel>\n                        <TabPanel value={value} index={1}>\n                            В разработке\n                        </TabPanel>\n                        <ButtonWrapper>\n                            <Button onClick={onClose}>Отмена</Button>\n                            <Button\n                                disabled={invalid}\n                                onClick={async () => {\n                                    const variables: any = {\n                                        contact: {\n                                            ...values,\n                                            clientStatus: values.clientStatus?.key,\n                                            responsible: values.responsible.id\n                                        }\n                                    };\n\n                                    if (contact) {\n                                        variables.uuid = contact.id;\n                                        delete variables.contact.__typename;\n                                    } else {\n                                        variables.developerUuid = developerUuid;\n                                    }\n\n                                    await mutation({\n                                        variables,\n                                        refetchQueries: [\n                                            {\n                                                query: ALL_CONTACTS,\n                                                variables: {\n                                                    developerUuid\n                                                }\n                                            }\n                                        ]\n                                    });\n                                    onClose();\n                                }}\n                            >\n                                Сохранить\n                            </Button>\n                        </ButtonWrapper>\n                    </ContactFormWrapper>\n                );\n            }}\n        </Form>\n    );\n}\n","import React from 'react';\n\nexport function Notes() {\n    return (\n        <div>\n            <h1>В разработке</h1>\n        </div>\n    );\n}\n","import {useQuery} from '@apollo/react-hooks';\nimport {Slide} from '@material-ui/core';\nimport Dialog from '@material-ui/core/Dialog';\nimport React from 'react';\nimport styled from 'styled-components';\nimport {GET_CONTACT} from '../../../../graphql/queries/contactQuery';\nimport {ContactForm} from './ContactForm';\nimport {Notes} from './Notes';\n\nconst ContactsWrapper = styled.div`\n    width: 100%;\n    height: 100%;\n    display: flex;\n`;\n\nconst Transition: any = React.forwardRef((props: any, ref: React.Ref<unknown>) => (\n    <Slide direction=\"left\" ref={ref} {...props} />\n));\n\nexport const Contact = ({open, handleClose, uuid}) => {\n    const {data, error, loading} = useQuery(GET_CONTACT, {\n        variables: {\n            uuid\n        },\n        fetchPolicy: 'cache-and-network',\n        skip: !uuid\n    });\n\n    if (error || loading) {\n        return null;\n    }\n\n    return (\n        <Dialog fullScreen open={open} onClose={handleClose} TransitionComponent={Transition}>\n            <ContactsWrapper>\n                <ContactForm onClose={handleClose} contact={data?.getContact} />\n                <Notes />\n            </ContactsWrapper>\n        </Dialog>\n    );\n};\n\nexport default Contact;\n","import {useMutation, useQuery} from '@apollo/react-hooks';\nimport {IconButton, Typography} from '@material-ui/core';\nimport Container from '@material-ui/core/Container';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport MaterialTable, {MTableToolbar} from 'material-table';\nimport React, {useEffect} from 'react';\nimport {connect} from 'react-redux';\nimport {useParams} from 'react-router-dom';\nimport {DELETE_CONTACT} from '../../../graphql/mutations/contactMutation';\nimport {ALL_CONTACTS} from '../../../graphql/queries/contactQuery';\nimport {setRouteParams, setTitle} from '../../../redux/actions';\nimport {Confirmation} from '../../shared/components/dialogs/ConfirmDialog';\nimport Contact from './Contact/Contact';\n\nexport const Contacts = connect(null, (dispatch) => ({\n    applyParams: (params) => dispatch(setRouteParams(params)),\n    applyTitle: (title) => dispatch(setTitle(title))\n}))(({applyParams, applyTitle}) => {\n    const params: any = useParams();\n\n    useEffect(() => {\n        applyParams(params);\n        applyTitle('Контакты');\n    }, [params]); // eslint-disable-line\n\n    const {data, loading, error} = useQuery(ALL_CONTACTS, {\n        fetchPolicy: 'cache-and-network',\n        variables: {\n            developerUuid: params.developerUuid\n        }\n    });\n    const [deleteMutation] = useMutation(DELETE_CONTACT, {\n        refetchQueries: [\n            {\n                query: ALL_CONTACTS,\n                variables: {\n                    developerUuid: params.developerUuid\n                }\n            }\n        ]\n    });\n    const [open, setOpen] = React.useState(false);\n    const [contactUuid, setContact] = React.useState<any>();\n\n    if (loading || error) {\n        return null;\n    }\n\n    return (\n        <Container maxWidth=\"lg\">\n            <Typography variant=\"h4\" component=\"h4\" gutterBottom>\n                Контакты\n            </Typography>\n            <MaterialTable\n                columns={[\n                    {\n                        title: '',\n                        width: 50,\n                        field: 'name',\n                        render: (rowData: any) => {\n                            return (\n                                <Confirmation>\n                                    {(confirmFn: (cb: () => void) => void) => {\n                                        return (\n                                            <IconButton\n                                                color=\"secondary\"\n                                                component=\"span\"\n                                                onClick={() => {\n                                                    confirmFn(() => async () => {\n                                                        await deleteMutation({\n                                                            variables: {\n                                                                uuid: rowData.id\n                                                            }\n                                                        });\n                                                    });\n                                                }}\n                                            >\n                                                <DeleteIcon />\n                                            </IconButton>\n                                        );\n                                    }}\n                                </Confirmation>\n                            );\n                        }\n                    },\n                    {title: 'Имя', field: 'name'},\n                    {\n                        title: 'Телефон',\n                        field: 'phones',\n                        render: (rowData: any) => {\n                            return rowData.phones.map((phone, i) => {\n                                return <div key={`${rowData.id}${i}`}>{phone}</div>;\n                            });\n                        }\n                    },\n                    {title: 'Почта', field: 'email'},\n                    {title: 'Должность', field: 'position'}\n                ]}\n                localization={{\n                    header: {\n                        actions: ''\n                    }\n                }}\n                actions={[\n                    {\n                        icon: 'edit',\n                        tooltip: 'Редактировать',\n                        onClick: (event, rowData: any) => {\n                            setContact(rowData.id);\n                            setOpen(true);\n                        }\n                    },\n                    {\n                        icon: 'add',\n                        tooltip: 'Новый контакт',\n                        isFreeAction: true,\n                        onClick: () => {\n                            setContact(null);\n                            setOpen(true);\n                        }\n                    }\n                ]}\n                data={data.getAllContacts}\n                title=\"\"\n                components={{\n                    Toolbar: (props) => <MTableToolbar {...props} />\n                }}\n            />\n            <Contact\n                open={open}\n                uuid={contactUuid}\n                handleClose={() => {\n                    setContact(null);\n                    setOpen(false);\n                }}\n            />\n        </Container>\n    );\n});\n\nexport default Contacts;\n","import Typography from '@material-ui/core/Typography';\nimport {Box} from '@material-ui/core';\nimport * as React from 'react';\n\ninterface TabPanelProps {\n    children?: React.ReactNode;\n    index: any;\n    value: any;\n}\n\nexport function TabPanel(props: TabPanelProps) {\n    const {children, value, index, ...other} = props;\n\n    return (\n        <Typography\n            component=\"div\"\n            role=\"tabpanel\"\n            hidden={value !== index}\n            id={`simple-tabpanel-${index}`}\n            aria-labelledby={`simple-tab-${index}`}\n            {...other}\n        >\n            <Box p={3}>{children}</Box>\n        </Typography>\n    );\n}\n","import Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport React, {Fragment} from 'react';\n\nexport function Confirmation(props: any) {\n    const [open, setOpen] = React.useState(false);\n    const [callbackFn, setCallbackFn] = React.useState<any>();\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const confirmFn = (callback: () => void) => {\n        handleClickOpen();\n        setCallbackFn(callback);\n    };\n    return (\n        <Fragment>\n            {props.children(confirmFn)}\n            <ConfirmDialog\n                open={open}\n                title={props.title}\n                text={props.text}\n                cancel={handleClose}\n                accept={() => {\n                    callbackFn();\n                    handleClose();\n                }}\n            />\n        </Fragment>\n    );\n}\n\nfunction ConfirmDialog({open, cancel, accept, text, title}: any) {\n    const heading = title ? title : 'Вы уверены?';\n    const mainText = text ? text : 'Данная операция не сможет быть отменена';\n    return (\n        <Dialog open={open} onClose={cancel} aria-labelledby=\"responsive-dialog-title\">\n            <DialogTitle id=\"responsive-dialog-title\">{heading}</DialogTitle>\n            <DialogContent>\n                <DialogContentText>{mainText}</DialogContentText>\n            </DialogContent>\n            <DialogActions>\n                <Button\n                    autoFocus={true}\n                    onClick={(event) => {\n                        event.preventDefault();\n                        event.stopPropagation();\n                        cancel();\n                    }}\n                    color=\"primary\"\n                >\n                    Отмена\n                </Button>\n                <Button\n                    onClick={(event) => {\n                        event.preventDefault();\n                        event.stopPropagation();\n                        accept();\n                    }}\n                    color=\"primary\"\n                    autoFocus={true}\n                >\n                    Да\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n","import {gql} from 'apollo-boost';\n\nexport const ALL_CONTACTS = gql`\n    query getAllContacts($developerUuid: String!) {\n        getAllContacts(developerUuid: $developerUuid) {\n            id\n            name\n            email\n            phones\n            position\n            clientStatus\n        }\n    }\n`;\n\nexport const GET_CONTACT = gql`\n    query getContact($uuid: String!) {\n        getContact(uuid: $uuid) {\n            id\n            name\n            email\n            phones\n            position\n            clientStatus\n            responsible {\n                id\n                name\n                role {\n                    key\n                    displayName\n                }\n            }\n        }\n    }\n`;\n\nexport const GET_CONTACT_DROPDOWNS = gql`\n    query getContactsDropdowns {\n        clientStatuses {\n            key\n            displayName\n        }\n    }\n`;\n","import {ListItem} from '@material-ui/core';\nimport Divider from '@material-ui/core/Divider';\nimport List from '@material-ui/core/List';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport React from 'react';\nimport styled from 'styled-components';\n\nconst StyledList = styled(List)`\n    display: flex;\n    padding: 8px !important;\n    align-items: center;\n    margin-left: 8px;\n    &:hover {\n        background-color: rgba(0, 0, 0, 0.08);\n        cursor: pointer;\n    }\n`;\nexport function SingleDisplayName({data}: any) {\n    return data.displayName;\n}\nexport function TradeStateOptions(props: any) {\n    const {innerProps, data, innerRef} = props;\n    return (\n        <StyledList\n            ref={innerRef}\n            {...innerProps}\n            onClick={() => {\n                props.selectOption(data);\n            }}\n        >\n            <ListItem alignItems=\"flex-start\">\n                <ListItemText primary={data?.displayName} />\n            </ListItem>\n            <Divider variant=\"inset\" component=\"li\" />\n        </StyledList>\n    );\n}\n\nexport function KeyDisplayNameOptions(props: any) {\n    const {innerProps, data, innerRef} = props;\n    return (\n        <StyledList\n            ref={innerRef}\n            {...innerProps}\n            onClick={() => {\n                props.selectOption(data);\n            }}\n        >\n            <ListItem alignItems=\"flex-start\">\n                <ListItemText primary={data?.displayName} />\n            </ListItem>\n            <Divider variant=\"inset\" component=\"li\" />\n        </StyledList>\n    );\n}\n"],"sourceRoot":""}