{"version":3,"sources":["components/Main/ApartmentComplexBuilder/ApartmentComplexForm/utils.ts","components/Main/ApartmentComplexBuilder/ApartmentComplexForm/ApartmentComplexForm.tsx","components/Main/Developer/DeveloperForm.tsx","graphql/queries/breadcrumbQuery.ts","components/Main/Breadcrumbs/AppBreadcrumbs.tsx","components/Main/Header/Header.tsx","components/Main/HouseBuilder/HouseForm/utils.ts","components/Main/HouseBuilder/HouseForm/HouseForm.tsx","components/Main/Sidebar/Sidebar.tsx","components/Main/Main.tsx","components/shared/components/styled/index.tsx","graphql/queries/houseQuery.ts","redux/actions/index.ts","graphql/mutations/apartmentComplexMutation.ts","graphql/queries/apartmentComplexQuery.ts","graphql/queries/developerQuery.ts","graphql/mutations/houseMutation.ts","graphql/queries/userQuery.ts","components/Main/drawerStyles.ts","graphql/mutations/developerMutaion.ts"],"names":["getApartmentComplexVariables","apartmentComplex","type","name","city","district","levels","sections","price","beginDate","endDate","address","class","Number","FormContainer","styled","div","FormBlock","StyledButtonContainer","Container","StyledButton","Button","StyledLink","Link","required","value","undefined","ApartmentComplexCreateForm","connect","dispatch","applyParams","params","setRouteParams","applyTitle","title","setTitle","useParams","useEffect","developerUuid","useMutation","CREATE_APARTMENT_COMPLEX","createApartmentComplex","data","to","id","ApartmentComplexForm","onSubmit","values","a","variables","ApartmentComplexEditForm","apartmentComplexUuid","useQuery","GET_EDIT_APARTMENT_COMPLEX_INFO","fetchPolicy","uuid","loading","error","EDIT_APARTMENT_COMPLEX","updateApartmentComplex","getApartmentComplex","key","updatedValues","outerProps","useState","selectedCity","setCity","APARTMENT_COMPLEX_DROPDOWNS","cities","apartmentComplexClasses","apartmentComplexTypes","initialValues","e","invalid","form","maxWidth","Typography","variant","gutterBottom","Grid","container","spacing","item","xs","md","validate","props","TextField","select","input","onChange","label","margin","fullWidth","map","MenuItem","displayName","target","change","disabled","find","districts","getDistricts","inputProps","min","step","placeholder","DatePicker","views","inputVariant","direction","justify","alignItems","size","onClick","color","LogoInput","DropzoneContainer","LogoContainer","Paper","Logo","img","LogoImageContainer","LogoControls","StyledDropzone","useDropzone","accept","onDrop","acceptedFiles","getRootProps","getInputProps","isDragActive","isDragAccept","isDragReject","className","IconButton","aria-label","component","PhotoCamera","LogoPreview","image","onDelete","src","alt","LogoComponent","setImage","logo","previewUrl","setPreviewUrl","handleDrop","dropped","reader","FileReader","readAsDataURL","onloadend","result","elevation","DeveloperEditForm","GET_DEVELOPER","UPDATE_DEVELOPER","updateDeveloper","getDeveloper","__typename","developerData","DeveloperForm","downloadUrl","DeveloperCreateForm","CREATE_DEVELOPER","createDeveloper","emails","receptionNumbers","salesNumbers","DEVELOPER_DROPDOWNS","mutators","arrayMutators","initialValuesEqual","b","fields","index","alignContent","push","remove","GET_BREADCRUMBS","gql","StyledBreadcrumbs","Breadcrumbs","AppBreadcrumbs","state","route","noParams","length","theme","useTheme","matches","useMediaQuery","breakpoints","down","args","skip","style","separator","fontSize","getBreadcrumbs","breadcrumb","i","url","StyledAppBar","AppBar","FilterContainer","Header","open","handleDrawerOpen","drawerStyles","root","position","clsx","appBar","appBarShift","Toolbar","edge","menuButton","hide","getHouseDataVariables","houseData","parking","HouseCreateForm","CREATE_HOUSE","createHouse","HouseForm","apartmentComplexId","HouseEditForm","UPDATE_HOUSE","updateHouse","updating","houseUuid","HOUSE_DATA","getHouse","defaultValue","FormControl","FormLabel","RadioGroup","row","FormControlLabel","control","Radio","CircularProgress","thickness","StyledDrawer","Drawer","Sidebar","handleDrawerClose","drawer","drawerOpen","drawerClose","classes","paper","toolbar","Divider","List","ListItem","button","ListItemIcon","ListItemText","primary","Content","ChessGrid","lazy","UserList","ApartmentComplexList","MainChessGrid","DeveloperList","Contacts","Trades","HouseInfo","ApartmentComplexInfo","Main","GET_USER_INFO","React","setOpen","useStyles","getUserInfo","CssBaseline","content","fallback","exact","path","StyledNavLink","NavLink","FabButtonContainer","StyledFab","Fab","getColor","StyledCard","Card","StyledCardMedia","CardMedia","HOUSE_LIST","HOUSE_INFO","GET_PUBLIC_GROUPED_FLATS_CHESSGRID","GET_GROUPED_FLATS_CHESSGRID","GET_GROUPED_FLATS","payload","DELETE_APARTMENT_COMPLEX","UPLOAD_FILE","DELETE_IMAGE","UPLOAD_SPREADSHEET","ASSIGN_FLATS","ALL_APARTMENT_COMPLEXES","APARTMENT_COMPLEX_INFO","GET_DEVELOPERS","GET_DEVELOPER_APARTMENT_COMPLEXES","GET_PUBLIC_DEVELOPER_APARTMENT_COMPLEXES","DELETE_HOUSE","REORDER_LEVELS","PUBLISH_HOUSE","GET_USERS","GET_ROLES","makeStyles","createStyles","display","zIndex","transition","transitions","create","easing","sharp","duration","leavingScreen","marginLeft","width","enteringScreen","marginRight","flexShrink","whiteSpace","overflowX","up","justifyContent","padding","mixins","flexGrow","DELETE_DEVELOPER"],"mappings":"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","file":"static/js/17.2b15cb4a.chunk.js","sourcesContent":["import {ApartmentComplexDTO, ApartmentComplexFormValues} from '../../../shared/types/apartmentComplex.types';\n\nexport function getApartmentComplexVariables(apartmentComplex: ApartmentComplexFormValues): ApartmentComplexDTO {\n    const {type, name, city, district, levels, sections, price, beginDate, endDate, address} = apartmentComplex;\n    return {\n        type,\n        name,\n        city,\n        district,\n        address,\n        class: apartmentComplex.class,\n        levels: Number(levels),\n        sections: Number(sections),\n        price: Number(price),\n        beginDate,\n        endDate\n    };\n}\n","import {useMutation, useQuery} from '@apollo/react-hooks';\nimport {MenuItem} from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport {DatePicker} from '@material-ui/pickers';\nimport React, {ChangeEvent, Fragment, useEffect, useState} from 'react';\nimport {Field, Form} from 'react-final-form';\nimport {connect} from 'react-redux';\nimport {Link, Redirect, useParams} from 'react-router-dom';\nimport styled from 'styled-components';\nimport {CREATE_APARTMENT_COMPLEX, EDIT_APARTMENT_COMPLEX} from '../../../../graphql/mutations/apartmentComplexMutation';\nimport {\n    APARTMENT_COMPLEX_DROPDOWNS,\n    GET_EDIT_APARTMENT_COMPLEX_INFO\n} from '../../../../graphql/queries/apartmentComplexQuery';\nimport {setRouteParams, setTitle} from '../../../../redux/actions';\nimport {ApartmentComplexFormValues, ApartmentComplexType} from '../../../shared/types/apartmentComplex.types';\nimport {getApartmentComplexVariables} from './utils';\nconst FormContainer = styled.div`\n    border: 1px solid #aaa;\n`;\n\nconst FormBlock = styled.div`\n    padding: 16px;\n`;\n\nconst StyledButtonContainer: any = styled(Container)`\n    margin-top: 12px;\n`;\n\nconst StyledButton = styled(Button)`\n    &.MuiButtonBase-root {\n        margin-left: 4px;\n    }\n`;\n\nconst StyledLink = styled(Link)`\n    text-decoration: none;\n`;\n\nconst required = (value: any) => (value ? undefined : 'Required');\n\nexport const ApartmentComplexCreateForm = connect(null, (dispatch) => ({\n    applyParams: (params) => dispatch(setRouteParams(params)),\n    applyTitle: (title) => dispatch(setTitle(title))\n}))(({applyParams, applyTitle}) => {\n    const params = useParams();\n\n    useEffect(() => {\n        applyParams(params);\n        applyTitle('Создание ЖК');\n    }, [params]); // eslint-disable-line\n\n    const {developerUuid} = useParams();\n    const [createApartmentComplex, {data: apartmentComplex}] = useMutation(CREATE_APARTMENT_COMPLEX);\n\n    if (apartmentComplex && apartmentComplex.createApartmentComplex) {\n        return (\n            <Redirect\n                to={`/developers/${developerUuid}/apartmentComplex/${apartmentComplex.createApartmentComplex.id}/overview/info`}\n            />\n        );\n    }\n\n    return (\n        <Fragment>\n            <ApartmentComplexForm\n                title={'Создание комплекса'}\n                onSubmit={async (values) => {\n                    await createApartmentComplex({\n                        variables: {\n                            developerUuid,\n                            apartmentComplex: getApartmentComplexVariables(values as ApartmentComplexFormValues)\n                        }\n                    });\n                }}\n            />\n        </Fragment>\n    );\n});\n\nexport const ApartmentComplexEditForm = connect(null, (dispatch) => ({\n    applyParams: (params) => dispatch(setRouteParams(params)),\n    applyTitle: (title) => dispatch(setTitle(title))\n}))(({applyParams, applyTitle}) => {\n    const params = useParams();\n\n    useEffect(() => {\n        applyParams(params);\n        applyTitle('Редактирование ЖК');\n    }, [params]); // eslint-disable-line\n    const {apartmentComplexUuid, developerUuid} = useParams();\n\n    const {loading, error, data} = useQuery<{getApartmentComplex: ApartmentComplexType}>(\n        GET_EDIT_APARTMENT_COMPLEX_INFO,\n        {\n            fetchPolicy: 'no-cache',\n            variables: {\n                uuid: apartmentComplexUuid\n            }\n        }\n    );\n\n    const [updateApartmentComplex, {data: apartmentComplex}] = useMutation(EDIT_APARTMENT_COMPLEX);\n\n    if (apartmentComplex && apartmentComplex.updateApartmentComplex) {\n        return (\n            <Redirect\n                to={`/developers/${developerUuid}/apartmentComplex/${apartmentComplex.updateApartmentComplex.id}/overview/info`}\n            />\n        );\n    }\n\n    if (loading) {\n        return <p>Loading...</p>;\n    }\n    if (error || !data) {\n        return <p>Error :(</p>;\n    }\n\n    const values: any = data?.getApartmentComplex;\n    values.city = values?.city?.key;\n    values.type = values?.type?.key;\n    values.class = values?.class?.key;\n    values.district = values?.district?.key;\n    return (\n        <Fragment>\n            <ApartmentComplexForm\n                title={'Редактирование комплекса'}\n                onSubmit={async (updatedValues) => {\n                    await updateApartmentComplex({\n                        variables: {\n                            uuid: apartmentComplexUuid,\n                            apartmentComplex: getApartmentComplexVariables(updatedValues as ApartmentComplexFormValues)\n                        }\n                    });\n                }}\n                values={values}\n            />\n        </Fragment>\n    );\n});\n\ninterface ApartmentComplexForm {\n    onSubmit: (values: any) => void;\n    values?: any;\n    title: string;\n}\n\nfunction getDistricts(cities, selectedCity) {\n    return cities.find((city) => city.key === selectedCity).districts || [];\n}\n\nexport function ApartmentComplexForm(outerProps: ApartmentComplexForm) {\n    const {developerUuid} = useParams();\n    const [selectedCity, setCity] = useState<any>(outerProps.values?.city);\n\n    const {loading, error, data} = useQuery(APARTMENT_COMPLEX_DROPDOWNS);\n\n    if (loading || error) {\n        return null;\n    }\n\n    const {cities, apartmentComplexClasses, apartmentComplexTypes} = data;\n\n    return (\n        <Fragment>\n            <Form initialValues={outerProps.values} onSubmit={(e) => {}}>\n                {({values, invalid, form}) => {\n                    return (\n                        <Fragment>\n                            <Container maxWidth=\"md\">\n                                <FormContainer>\n                                    <FormBlock>\n                                        <Typography variant=\"h5\" gutterBottom={true}>\n                                            {outerProps.title}\n                                        </Typography>\n                                        <Grid container={true} spacing={3}>\n                                            <Grid item={true} xs={12} md={6}>\n                                                <Field name=\"type\" validate={required}>\n                                                    {(props) => {\n                                                        return (\n                                                            <TextField\n                                                                select\n                                                                name={props.input.name}\n                                                                value={props.input.value}\n                                                                onChange={props.input.onChange}\n                                                                label=\"Тип объекта\"\n                                                                margin=\"normal\"\n                                                                fullWidth={true}\n                                                                variant=\"outlined\"\n                                                            >\n                                                                {apartmentComplexTypes.map((item: any) => {\n                                                                    return (\n                                                                        <MenuItem key={item.key} value={item.key}>\n                                                                            {item.displayName}\n                                                                        </MenuItem>\n                                                                    );\n                                                                })}\n                                                            </TextField>\n                                                        );\n                                                    }}\n                                                </Field>\n                                            </Grid>\n                                            <Grid item={true} xs={12} md={6}>\n                                                <Field name=\"name\" validate={required}>\n                                                    {(props) => (\n                                                        <TextField\n                                                            label=\"Название объекта\"\n                                                            margin=\"normal\"\n                                                            name={props.input.name}\n                                                            value={props.input.value}\n                                                            onChange={props.input.onChange}\n                                                            fullWidth={true}\n                                                            variant=\"outlined\"\n                                                        />\n                                                    )}\n                                                </Field>\n                                            </Grid>\n                                            <Grid item={true} xs={12} md={6}>\n                                                <Field name=\"city\" validate={required}>\n                                                    {(props) => (\n                                                        <TextField\n                                                            select={true}\n                                                            label=\"Город\"\n                                                            margin=\"normal\"\n                                                            fullWidth={true}\n                                                            name={props.input.name}\n                                                            value={props.input.value}\n                                                            onChange={(\n                                                                e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n                                                            ) => {\n                                                                props.input.onChange(e.target.value);\n                                                                setCity(e.target.value);\n                                                                form.change('district', '');\n                                                            }}\n                                                            variant=\"outlined\"\n                                                        >\n                                                            {cities.map((item: any) => {\n                                                                return (\n                                                                    <MenuItem key={item.key} value={item.key}>\n                                                                        {item.displayName}\n                                                                    </MenuItem>\n                                                                );\n                                                            })}\n                                                        </TextField>\n                                                    )}\n                                                </Field>\n                                            </Grid>\n                                            <Grid item={true} xs={12} md={6}>\n                                                <Field name=\"district\" validate={required}>\n                                                    {(props) => {\n                                                        return (\n                                                            <TextField\n                                                                select={true}\n                                                                disabled={!selectedCity}\n                                                                label=\"Район\"\n                                                                margin=\"normal\"\n                                                                fullWidth={true}\n                                                                variant=\"outlined\"\n                                                                name={props.input.name}\n                                                                value={props.input.value}\n                                                                onChange={(\n                                                                    e: ChangeEvent<\n                                                                        HTMLInputElement | HTMLTextAreaElement\n                                                                    >\n                                                                ) => {\n                                                                    props.input.onChange(e.target.value);\n                                                                }}\n                                                            >\n                                                                {selectedCity ? (\n                                                                    getDistricts(cities, selectedCity).map(\n                                                                        (item: any) => {\n                                                                            return (\n                                                                                <MenuItem\n                                                                                    key={item.key}\n                                                                                    value={item.key}\n                                                                                >\n                                                                                    {item.displayName}\n                                                                                </MenuItem>\n                                                                            );\n                                                                        }\n                                                                    )\n                                                                ) : (\n                                                                    <MenuItem />\n                                                                )}\n                                                            </TextField>\n                                                        );\n                                                    }}\n                                                </Field>\n                                            </Grid>\n                                            <Grid item={true} xs={12} md={6}>\n                                                <Field name=\"address\" validate={required}>\n                                                    {(props) => (\n                                                        <TextField\n                                                            label=\"Строительный адрес\"\n                                                            margin=\"normal\"\n                                                            fullWidth={true}\n                                                            variant=\"outlined\"\n                                                            name={props.input.name}\n                                                            value={props.input.value}\n                                                            onChange={props.input.onChange}\n                                                        />\n                                                    )}\n                                                </Field>\n                                            </Grid>\n                                            <Grid item={true} xs={12} md={6}>\n                                                <Field name=\"class\" validate={required}>\n                                                    {(props) => (\n                                                        <TextField\n                                                            select={true}\n                                                            label=\"Класс\"\n                                                            margin=\"normal\"\n                                                            fullWidth={true}\n                                                            variant=\"outlined\"\n                                                            name={props.input.name}\n                                                            value={props.input.value}\n                                                            onChange={props.input.onChange}\n                                                        >\n                                                            {apartmentComplexClasses.map((item: any) => {\n                                                                return (\n                                                                    <MenuItem key={item.key} value={item.key}>\n                                                                        {item.displayName}\n                                                                    </MenuItem>\n                                                                );\n                                                            })}\n                                                        </TextField>\n                                                    )}\n                                                </Field>\n                                            </Grid>\n                                            <Grid item={true} xs={12} md={6}>\n                                                <Field name=\"levels\" validate={required}>\n                                                    {(props) => (\n                                                        <TextField\n                                                            label=\"Этажность\"\n                                                            inputProps={{min: '0', step: '1'}}\n                                                            type=\"number\"\n                                                            margin=\"normal\"\n                                                            fullWidth={true}\n                                                            variant=\"outlined\"\n                                                            name={props.input.name}\n                                                            value={props.input.value}\n                                                            onChange={props.input.onChange}\n                                                        />\n                                                    )}\n                                                </Field>\n                                            </Grid>\n                                            <Grid item={true} xs={12} md={6}>\n                                                <Field name=\"sections\" validate={required}>\n                                                    {(props) => (\n                                                        <TextField\n                                                            label=\"Количество секций\"\n                                                            inputProps={{min: '0', step: '1'}}\n                                                            type=\"number\"\n                                                            margin=\"normal\"\n                                                            fullWidth={true}\n                                                            variant=\"outlined\"\n                                                            name={props.input.name}\n                                                            value={props.input.value}\n                                                            onChange={props.input.onChange}\n                                                        />\n                                                    )}\n                                                </Field>\n                                            </Grid>\n                                            <Grid item={true} xs={12} md={6}>\n                                                <Field name=\"price\" validate={required}>\n                                                    {(props) => (\n                                                        <TextField\n                                                            label=\"Цена за м2\"\n                                                            inputProps={{min: '0', step: '1'}}\n                                                            type=\"number\"\n                                                            placeholder=\"Placeholder\"\n                                                            margin=\"normal\"\n                                                            fullWidth={true}\n                                                            name={props.input.name}\n                                                            value={props.input.value}\n                                                            onChange={props.input.onChange}\n                                                            variant=\"outlined\"\n                                                        />\n                                                    )}\n                                                </Field>\n                                            </Grid>\n                                            <Grid item={true} xs={12} md={6}>\n                                                <Field name=\"beginDate\" validate={required}>\n                                                    {(props) => (\n                                                        <DatePicker\n                                                            views={['year', 'month']}\n                                                            name={props.input.name}\n                                                            label=\"Начало строительства\"\n                                                            value={props.input.value ? props.input.value : null}\n                                                            margin=\"normal\"\n                                                            fullWidth={true}\n                                                            inputVariant=\"outlined\"\n                                                            onChange={props.input.onChange}\n                                                        />\n                                                    )}\n                                                </Field>\n                                            </Grid>\n                                            <Grid item={true} xs={12} md={6}>\n                                                <Field name=\"endDate\" validate={required}>\n                                                    {(props) => (\n                                                        <DatePicker\n                                                            views={['year', 'month']}\n                                                            name={props.input.name}\n                                                            label=\"Конец строительства\"\n                                                            value={props.input.value ? props.input.value : null}\n                                                            margin=\"normal\"\n                                                            fullWidth={true}\n                                                            inputVariant=\"outlined\"\n                                                            onChange={props.input.onChange}\n                                                        />\n                                                    )}\n                                                </Field>\n                                            </Grid>\n                                        </Grid>\n                                    </FormBlock>\n                                </FormContainer>\n                            </Container>\n                            <StyledButtonContainer maxWidth=\"md\">\n                                <Grid\n                                    container={true}\n                                    direction=\"row\"\n                                    spacing={2}\n                                    justify=\"flex-end\"\n                                    alignItems=\"center\"\n                                >\n                                    <Grid justify=\"flex-end\" container={true} item={true} xs={6}>\n                                        <StyledLink to={`/developers/${developerUuid}/apartmentComplexes`}>\n                                            <StyledButton variant=\"outlined\" size=\"large\">\n                                                Отмена\n                                            </StyledButton>\n                                        </StyledLink>\n                                        <StyledButton\n                                            disabled={invalid}\n                                            onClick={() => {\n                                                outerProps.onSubmit(values);\n                                            }}\n                                            variant=\"contained\"\n                                            color=\"primary\"\n                                            size=\"large\"\n                                        >\n                                            Далее\n                                        </StyledButton>\n                                    </Grid>\n                                </Grid>\n                            </StyledButtonContainer>\n                        </Fragment>\n                    );\n                }}\n            </Form>\n        </Fragment>\n    );\n}\n","import {useMutation, useQuery} from '@apollo/react-hooks';\nimport {Button, IconButton, MenuItem, Paper, TextField} from '@material-ui/core';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport {PhotoCamera} from '@material-ui/icons';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport EditIcon from '@material-ui/icons/Edit';\nimport arrayMutators from 'final-form-arrays';\nimport React, {ChangeEvent, Fragment, useEffect, useState} from 'react';\nimport {useDropzone} from 'react-dropzone';\nimport {Field, Form} from 'react-final-form';\nimport {FieldArray} from 'react-final-form-arrays';\nimport {connect} from 'react-redux';\nimport {Redirect, useParams} from 'react-router-dom';\nimport styled from 'styled-components';\nimport {CREATE_DEVELOPER, UPDATE_DEVELOPER} from '../../../graphql/mutations/developerMutaion';\nimport {DEVELOPER_DROPDOWNS, GET_DEVELOPER} from '../../../graphql/queries/developerQuery';\nimport {setRouteParams, setTitle} from '../../../redux/actions';\nimport {DropzoneContainer, StyledLink} from '../../shared/components/styled';\nconst FormBlock = styled.div`\n    padding: 16px;\n`;\n\nconst LogoInput = styled(DropzoneContainer)`\n    width: 320px;\n    height: 320px;\n    justify-content: center;\n    .StyledDropzone__icon {\n        width: 120px;\n        height: 120px;\n        .MuiSvgIcon-root {\n            width: 96px;\n            height: 96px;\n        }\n    }\n`;\n\nconst LogoContainer = styled(Paper)`\n    width: 320px;\n    align-self: center;\n`;\n\nconst Logo = styled.img`\n    width: 320px;\n`;\n\nconst LogoImageContainer = styled.div`\n    position: relative;\n`;\n\nconst LogoControls = styled.div`\n    position: absolute;\n    top: 0;\n    right: 0;\n`;\n\nexport function StyledDropzone(props: any) {\n    const {getRootProps, getInputProps, isDragActive, isDragAccept, isDragReject} = useDropzone({\n        accept: 'image/*',\n        onDrop: (acceptedFiles) => {\n            props.onDrop(acceptedFiles[0]);\n        }\n    });\n\n    return (\n        <div className=\"container\">\n            <LogoInput {...getRootProps({isDragActive, isDragAccept, isDragReject})}>\n                <input {...getInputProps()} />\n                <IconButton\n                    className=\"StyledDropzone__icon\"\n                    color=\"default\"\n                    aria-label=\"upload picture\"\n                    component=\"span\"\n                >\n                    <PhotoCamera />\n                </IconButton>\n                <div>Лого застройщика</div>\n            </LogoInput>\n        </div>\n    );\n}\n\nfunction LogoPreview({image, onDrop, onDelete}) {\n    const {getRootProps, getInputProps} = useDropzone({\n        accept: 'image/*',\n        onDrop: (acceptedFiles) => {\n            onDrop(acceptedFiles[0]);\n        }\n    });\n\n    return (\n        <LogoImageContainer>\n            <Logo src={image} alt=\"logo\" />\n            <LogoControls>\n                <span {...getRootProps()}>\n                    <input {...getInputProps()} />\n                    <IconButton color=\"primary\" aria-label=\"add an alarm\">\n                        <EditIcon />\n                    </IconButton>\n                </span>\n                <IconButton\n                    color=\"secondary\"\n                    aria-label=\"add an alarm\"\n                    onClick={() => {\n                        onDelete();\n                    }}\n                >\n                    <DeleteIcon />\n                </IconButton>\n            </LogoControls>\n        </LogoImageContainer>\n    );\n}\n\nconst required = (value: any) => (value ? undefined : 'Required');\n\nfunction LogoComponent({setImage, logo}) {\n    const [previewUrl, setPreviewUrl] = useState<any>(logo);\n\n    const handleDrop = (dropped: any) => {\n        setImage(dropped);\n        const reader = new FileReader();\n        reader.readAsDataURL(dropped);\n\n        reader.onloadend = (e) => {\n            setPreviewUrl(reader.result as string);\n        };\n    };\n\n    return (\n        <Grid item={true} xs={12} md={6}>\n            <LogoContainer elevation={1}>\n                {!previewUrl && <StyledDropzone onDrop={handleDrop} />}\n                {previewUrl && (\n                    <LogoPreview\n                        image={previewUrl}\n                        onDrop={handleDrop}\n                        onDelete={() => {\n                            setPreviewUrl(null);\n                            setImage(null);\n                        }}\n                    />\n                )}\n            </LogoContainer>\n        </Grid>\n    );\n}\n\nexport const DeveloperEditForm = connect(null, (dispatch) => ({\n    applyParams: (params) => dispatch(setRouteParams(params)),\n    applyTitle: (title) => dispatch(setTitle(title))\n}))(({applyParams, applyTitle}) => {\n    const params = useParams();\n\n    useEffect(() => {\n        applyParams(params);\n        applyTitle('Редактирование застройщика');\n    }, [params]); // eslint-disable-line\n    const {developerUuid} = useParams();\n\n    const {data, loading, error} = useQuery(GET_DEVELOPER, {\n        variables: {\n            uuid: developerUuid\n        },\n        fetchPolicy: 'cache-and-network'\n    });\n    const [updateDeveloper, {data: updateResult}] = useMutation(UPDATE_DEVELOPER);\n\n    if (updateResult) {\n        return <Redirect to=\"/developers\" />;\n    }\n\n    if (loading) {\n        return <span>Loading</span>;\n    }\n\n    if (error || !data) {\n        return <span>Error</span>;\n    }\n\n    const {id, logo, __typename, ...initialValues} = data.getDeveloper;\n\n    const onSubmit = async (values, image) => {\n        await updateDeveloper({\n            variables: {\n                id: developerUuid,\n                developerData: values,\n                image\n            }\n        });\n    };\n\n    return (\n        <DeveloperForm\n            title={'Редактировать застройщика'}\n            onSubmit={onSubmit}\n            initialValues={initialValues}\n            logo={logo?.downloadUrl}\n        />\n    );\n});\n\nexport const DeveloperCreateForm = connect(null, (dispatch) => ({\n    applyParams: (params) => dispatch(setRouteParams(params)),\n    applyTitle: (title) => dispatch(setTitle(title))\n}))(({applyParams, applyTitle}) => {\n    const params = useParams();\n\n    useEffect(() => {\n        applyParams(params);\n        applyTitle('Создание застройщика');\n    }, [params]); // eslint-disable-line\n\n    const [createDeveloper, {data: createResult}] = useMutation(CREATE_DEVELOPER);\n\n    if (createResult) {\n        return <Redirect to=\"/developers\" />;\n    }\n\n    const initialValues = {\n        emails: [''],\n        receptionNumbers: [''],\n        salesNumbers: ['']\n    };\n\n    const onSubmit = async (values, image) => {\n        await createDeveloper({\n            variables: {\n                developerData: values,\n                image\n            }\n        });\n    };\n\n    return <DeveloperForm title={'Создать застройщика'} onSubmit={onSubmit} initialValues={initialValues} />;\n});\n\ninterface DeveloperFormProps {\n    onSubmit: (values, image) => void;\n    initialValues: any;\n    title: string;\n    logo?: string;\n}\nfunction DeveloperForm({onSubmit, initialValues, title, logo}: DeveloperFormProps) {\n    const [image, setImage] = useState<any>();\n\n    const {loading, error, data} = useQuery(DEVELOPER_DROPDOWNS);\n\n    if (loading || error) {\n        return null;\n    }\n\n    const {cities} = data;\n\n    return (\n        <Form\n            onSubmit={(e) => {}}\n            mutators={{\n                ...arrayMutators\n            }}\n            initialValuesEqual={(a, b) => {\n                return true;\n            }}\n            initialValues={initialValues}\n        >\n            {({values, invalid, form}) => {\n                return (\n                    <Fragment>\n                        <Container maxWidth=\"md\">\n                            <Paper elevation={3}>\n                                <FormBlock>\n                                    <Typography variant=\"h5\" gutterBottom={true}>\n                                        {title}\n                                    </Typography>\n                                    <Grid container={true} spacing={3} direction=\"row-reverse\">\n                                        <LogoComponent setImage={setImage} logo={logo} />\n                                        <Grid item={true} xs={12} md={6}>\n                                            <Grid item={true} xs={12}>\n                                                <Field name=\"name\" validate={required}>\n                                                    {(props) => (\n                                                        <TextField\n                                                            label=\"Название застройщика\"\n                                                            margin=\"normal\"\n                                                            name={props.input.name}\n                                                            value={props.input.value}\n                                                            onChange={props.input.onChange}\n                                                            fullWidth={true}\n                                                            variant=\"outlined\"\n                                                        />\n                                                    )}\n                                                </Field>\n                                            </Grid>\n                                            <Grid item={true} xs={12}>\n                                                <Field name=\"city\" validate={required}>\n                                                    {(props) => (\n                                                        <TextField\n                                                            select={true}\n                                                            label=\"Город\"\n                                                            margin=\"normal\"\n                                                            fullWidth={true}\n                                                            name={props.input.name}\n                                                            value={props.input.value}\n                                                            onChange={(\n                                                                e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n                                                            ) => {\n                                                                props.input.onChange(e.target.value);\n                                                            }}\n                                                            variant=\"outlined\"\n                                                        >\n                                                            {cities.map((item: any) => {\n                                                                return (\n                                                                    <MenuItem key={item.key} value={item.key}>\n                                                                        {item.displayName}\n                                                                    </MenuItem>\n                                                                );\n                                                            })}\n                                                        </TextField>\n                                                    )}\n                                                </Field>\n                                            </Grid>\n                                            <Grid item={true} xs={12}>\n                                                <Field name=\"address\" validate={required}>\n                                                    {(props) => (\n                                                        <TextField\n                                                            label=\"Адрес\"\n                                                            margin=\"normal\"\n                                                            name={props.input.name}\n                                                            value={props.input.value}\n                                                            onChange={props.input.onChange}\n                                                            fullWidth={true}\n                                                            variant=\"outlined\"\n                                                        />\n                                                    )}\n                                                </Field>\n                                            </Grid>\n                                            <FieldArray name=\"emails\">\n                                                {({fields}) =>\n                                                    fields.map((name, index) => (\n                                                        <Grid\n                                                            container={true}\n                                                            key={name}\n                                                            justify=\"center\"\n                                                            alignItems=\"center\"\n                                                            alignContent=\"center\"\n                                                        >\n                                                            <Grid item={true} xs={9}>\n                                                                <Field name={name} validate={required}>\n                                                                    {(props) => (\n                                                                        <TextField\n                                                                            label={`Электронная почта (${index + 1})`}\n                                                                            margin=\"normal\"\n                                                                            name={props.input.name}\n                                                                            value={props.input.value}\n                                                                            onChange={props.input.onChange}\n                                                                            fullWidth={true}\n                                                                            variant=\"outlined\"\n                                                                        />\n                                                                    )}\n                                                                </Field>\n                                                            </Grid>\n                                                            <Grid item xs={3}>\n                                                                <IconButton\n                                                                    onClick={() => {\n                                                                        fields.push(undefined);\n                                                                    }}\n                                                                    color=\"primary\"\n                                                                    aria-label=\"upload picture\"\n                                                                    component=\"span\"\n                                                                >\n                                                                    <AddCircleIcon />\n                                                                </IconButton>\n                                                                {index > 0 && (\n                                                                    <IconButton\n                                                                        color=\"secondary\"\n                                                                        onClick={() => {\n                                                                            fields.remove(index);\n                                                                        }}\n                                                                        aria-label=\"upload picture\"\n                                                                        component=\"span\"\n                                                                    >\n                                                                        <CancelIcon />\n                                                                    </IconButton>\n                                                                )}\n                                                            </Grid>\n                                                        </Grid>\n                                                    ))\n                                                }\n                                            </FieldArray>\n                                            <FieldArray name=\"receptionNumbers\">\n                                                {({fields}) =>\n                                                    fields.map((name, index) => (\n                                                        <Grid\n                                                            container={true}\n                                                            key={name}\n                                                            justify=\"center\"\n                                                            alignItems=\"center\"\n                                                            alignContent=\"center\"\n                                                        >\n                                                            <Grid item={true} xs={9}>\n                                                                <Field name={name} validate={required}>\n                                                                    {(props) => (\n                                                                        <TextField\n                                                                            label={`Номер приемной (${index + 1})`}\n                                                                            margin=\"normal\"\n                                                                            name={props.input.name}\n                                                                            value={props.input.value}\n                                                                            onChange={props.input.onChange}\n                                                                            fullWidth={true}\n                                                                            variant=\"outlined\"\n                                                                        />\n                                                                    )}\n                                                                </Field>\n                                                            </Grid>\n                                                            <Grid item xs={3}>\n                                                                <IconButton\n                                                                    onClick={() => {\n                                                                        fields.push(undefined);\n                                                                    }}\n                                                                    color=\"primary\"\n                                                                    aria-label=\"upload picture\"\n                                                                    component=\"span\"\n                                                                >\n                                                                    <AddCircleIcon />\n                                                                </IconButton>\n                                                                {index > 0 && (\n                                                                    <IconButton\n                                                                        color=\"secondary\"\n                                                                        onClick={() => {\n                                                                            fields.remove(index);\n                                                                        }}\n                                                                        aria-label=\"upload picture\"\n                                                                        component=\"span\"\n                                                                    >\n                                                                        <CancelIcon />\n                                                                    </IconButton>\n                                                                )}\n                                                            </Grid>\n                                                        </Grid>\n                                                    ))\n                                                }\n                                            </FieldArray>\n                                            <FieldArray name=\"salesNumbers\">\n                                                {({fields}) =>\n                                                    fields.map((name, index) => (\n                                                        <Grid\n                                                            container={true}\n                                                            key={name}\n                                                            justify=\"center\"\n                                                            alignItems=\"center\"\n                                                            alignContent=\"center\"\n                                                        >\n                                                            <Grid item={true} xs={9}>\n                                                                <Field name={name} validate={required}>\n                                                                    {(props) => (\n                                                                        <TextField\n                                                                            label={`Номер отдела продаж (${index + 1})`}\n                                                                            margin=\"normal\"\n                                                                            name={props.input.name}\n                                                                            value={props.input.value}\n                                                                            onChange={props.input.onChange}\n                                                                            fullWidth={true}\n                                                                            variant=\"outlined\"\n                                                                        />\n                                                                    )}\n                                                                </Field>\n                                                            </Grid>\n                                                            <Grid item xs={3}>\n                                                                <IconButton\n                                                                    onClick={() => {\n                                                                        fields.push(undefined);\n                                                                    }}\n                                                                    color=\"primary\"\n                                                                    aria-label=\"upload picture\"\n                                                                    component=\"span\"\n                                                                >\n                                                                    <AddCircleIcon />\n                                                                </IconButton>\n                                                                {index > 0 && (\n                                                                    <IconButton\n                                                                        color=\"secondary\"\n                                                                        onClick={() => {\n                                                                            fields.remove(index);\n                                                                        }}\n                                                                        aria-label=\"upload picture\"\n                                                                        component=\"span\"\n                                                                    >\n                                                                        <CancelIcon />\n                                                                    </IconButton>\n                                                                )}\n                                                            </Grid>\n                                                        </Grid>\n                                                    ))\n                                                }\n                                            </FieldArray>\n                                        </Grid>\n                                    </Grid>\n                                    <StyledLink to=\"/developers\">\n                                        <Button variant=\"outlined\">Отмена</Button>\n                                    </StyledLink>\n                                    <Button\n                                        disabled={invalid}\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        onClick={() => {\n                                            onSubmit(values, image);\n                                        }}\n                                    >\n                                        Сохранить\n                                    </Button>\n                                </FormBlock>\n                            </Paper>\n                        </Container>\n                    </Fragment>\n                );\n            }}\n        </Form>\n    );\n}\n","import {gql} from 'apollo-boost';\n\nexport const GET_BREADCRUMBS = gql`\n    query getBreadcrumbs($args: BreadcrumbArgs) {\n        getBreadcrumbs(args: $args) {\n            name\n            url\n        }\n    }\n`;\n","import {useQuery} from '@apollo/react-hooks';\nimport {Breadcrumbs, Typography, useMediaQuery, useTheme} from '@material-ui/core';\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\nimport React from 'react';\nimport {connect} from 'react-redux';\nimport styled from 'styled-components';\nimport {GET_BREADCRUMBS} from '../../../graphql/queries/breadcrumbQuery';\nimport {StyledLink} from '../../shared/components/styled';\n\nconst StyledBreadcrumbs = styled(Breadcrumbs)`\n    h6,\n    &.MuiTypography-colorTextSecondary {\n        color: #fff;\n    }\n`;\nexport const AppBreadcrumbs = connect((state) => ({\n    params: state.route.params,\n    title: state.route.title\n}))(({params, title}) => {\n    const noParams = !params || params.length === 0;\n\n    const theme = useTheme();\n    const matches = useMediaQuery(theme.breakpoints.down('xs'));\n\n    const {data, error, loading} = useQuery(GET_BREADCRUMBS, {\n        variables: {\n            args: params\n        },\n        skip: noParams\n    });\n\n    if (matches) {\n        return null;\n    }\n\n    if (noParams && title) {\n        return (\n            <Typography variant=\"h6\" color=\"textPrimary\" style={{color: '#fff'}}>\n                {title}\n            </Typography>\n        );\n    }\n    if (error || loading || !data) {\n        return null;\n    }\n    return (\n        <StyledBreadcrumbs aria-label=\"breadcrumb\" separator={<NavigateNextIcon fontSize=\"small\" />}>\n            {data.getBreadcrumbs.map((breadcrumb, i) => {\n                return (\n                    <StyledLink key={breadcrumb.url} to={breadcrumb.url}>\n                        <Typography variant=\"h6\" color=\"textPrimary\">\n                            {breadcrumb.name}\n                        </Typography>\n                    </StyledLink>\n                );\n            })}\n        </StyledBreadcrumbs>\n    );\n});\n","import AppBar from '@material-ui/core/AppBar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport clsx from 'clsx';\nimport React from 'react';\nimport {connect} from 'react-redux';\nimport styled from 'styled-components';\nimport {AppBreadcrumbs} from '../Breadcrumbs/AppBreadcrumbs';\n\nconst StyledAppBar = styled(AppBar)`\n    &.MuiAppBar-colorPrimary {\n        background-color: #37485c;\n    }\n`;\n\nconst FilterContainer = styled.div`\n    margin-left: auto;\n`;\n\ninterface HeaderProps {\n    open: boolean;\n    drawerStyles: any;\n    handleDrawerOpen: () => void;\n}\n\nexport const Header = connect((state) => ({\n    title: state.route.title\n}))(({open, handleDrawerOpen, drawerStyles}: HeaderProps & any) => (\n    <div className={drawerStyles.root}>\n        <StyledAppBar\n            position=\"fixed\"\n            className={clsx(drawerStyles.appBar, {\n                [drawerStyles.appBarShift]: open\n            })}\n        >\n            <Toolbar>\n                <IconButton\n                    color=\"inherit\"\n                    aria-label=\"open drawer\"\n                    onClick={handleDrawerOpen}\n                    edge=\"start\"\n                    className={clsx(drawerStyles.menuButton, {\n                        [drawerStyles.hide]: open\n                    })}\n                >\n                    <MenuIcon />\n                </IconButton>\n                <AppBreadcrumbs />\n                <FilterContainer id=\"chessGridFilterContainer\" />\n            </Toolbar>\n        </StyledAppBar>\n    </div>\n));\n","export interface HouseFormValues {\n    name: string;\n    price: number;\n    parking: string;\n}\n\nexport function getHouseDataVariables(houseData: HouseFormValues) {\n    const {name, price, parking} = houseData;\n    return {\n        name,\n        price: Number(price),\n        parking: parking === 'true'\n    };\n}\n","import {useMutation, useQuery} from '@apollo/react-hooks';\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Container from '@material-ui/core/Container';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Grid from '@material-ui/core/Grid';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport * as React from 'react';\nimport {Fragment, useEffect} from 'react';\nimport {Field, Form} from 'react-final-form';\nimport {connect} from 'react-redux';\nimport {Redirect, useParams} from 'react-router-dom';\nimport styled from 'styled-components';\nimport {CREATE_HOUSE, UPDATE_HOUSE} from '../../../../graphql/mutations/houseMutation';\nimport {HOUSE_DATA} from '../../../../graphql/queries/houseQuery';\nimport {setRouteParams, setTitle} from '../../../../redux/actions';\nimport {StyledLink} from '../../../shared/components/styled';\nimport {House} from '../../../shared/types/house.types';\nimport {getHouseDataVariables, HouseFormValues} from './utils';\n\nconst required = (value: any) => (value ? undefined : 'Required');\n\nconst StyledButton = styled(Button)`\n    &.MuiButtonBase-root {\n        margin-left: 4px;\n    }\n`;\n\nconst FormContainer = styled.div`\n    border: 1px solid #aaa;\n`;\n\nconst FormBlock = styled.div`\n    padding: 16px;\n`;\n\nexport const HouseCreateForm = connect(null, (dispatch) => ({\n    applyParams: (params) => dispatch(setRouteParams(params)),\n    applyTitle: (title) => dispatch(setTitle(title))\n}))(({applyParams, applyTitle}) => {\n    const params = useParams();\n\n    useEffect(() => {\n        applyParams(params);\n        applyTitle('Создание дома');\n    }, [params]); // eslint-disable-line\n    const [createHouse, {data, loading}] = useMutation(CREATE_HOUSE);\n    const {apartmentComplexUuid, developerUuid} = useParams();\n\n    if (data) {\n        return (\n            <Redirect to={`/developers/${developerUuid}/apartmentComplex/${apartmentComplexUuid}/overview/houses`} />\n        );\n    }\n\n    return (\n        <Container maxWidth=\"md\">\n            <FormContainer>\n                <FormBlock>\n                    <Typography variant=\"h5\" gutterBottom={true}>\n                        Создание дома\n                    </Typography>\n                    <HouseForm\n                        loading={loading}\n                        onSubmit={async (values) => {\n                            await createHouse({\n                                variables: {\n                                    apartmentComplexId: apartmentComplexUuid,\n                                    houseData: getHouseDataVariables(values as HouseFormValues)\n                                }\n                            });\n                        }}\n                    />\n                </FormBlock>\n            </FormContainer>\n        </Container>\n    );\n});\n\nexport const HouseEditForm = connect(null, (dispatch) => ({\n    applyParams: (params) => dispatch(setRouteParams(params)),\n    applyTitle: (title) => dispatch(setTitle(title))\n}))(({applyParams, applyTitle}) => {\n    const params = useParams();\n\n    useEffect(() => {\n        applyParams(params);\n        applyTitle('Редактирование дома');\n    }, [params]); // eslint-disable-line\n    const [updateHouse, {data: result, loading: updating}] = useMutation(UPDATE_HOUSE);\n    const {apartmentComplexUuid, houseUuid, developerUuid} = useParams();\n\n    const {loading, error, data} = useQuery<{getHouse: House}>(HOUSE_DATA, {\n        fetchPolicy: 'network-only',\n        variables: {\n            uuid: houseUuid\n        }\n    });\n\n    if (loading) {\n        return <p>Loading...</p>;\n    }\n    if (error || !data) {\n        return <p>Error :(</p>;\n    }\n\n    if (result) {\n        return (\n            <Redirect to={`/developers/${developerUuid}/apartmentComplex/${apartmentComplexUuid}/overview/houses`} />\n        );\n    }\n\n    return (\n        <Container maxWidth=\"md\">\n            <FormContainer>\n                <FormBlock>\n                    <Typography variant=\"h5\" gutterBottom={true}>\n                        Редактирование дома\n                    </Typography>\n                    <HouseForm\n                        values={data?.getHouse}\n                        loading={updating}\n                        onSubmit={async (values) => {\n                            await updateHouse({\n                                variables: {\n                                    uuid: houseUuid,\n                                    houseData: getHouseDataVariables(values as HouseFormValues)\n                                }\n                            });\n                        }}\n                    />\n                </FormBlock>\n            </FormContainer>\n        </Container>\n    );\n});\n\ninterface HouseFormProps {\n    onSubmit: (values: any) => void;\n    loading: boolean;\n    values?: any;\n}\n\nexport function HouseForm(outerProps: HouseFormProps) {\n    const {apartmentComplexUuid, developerUuid} = useParams();\n    return (\n        <Fragment>\n            <Form\n                onSubmit={(e) => {}}\n                initialValues={{...outerProps.values, parking: outerProps?.values?.parking ? 'true' : 'false'}}\n            >\n                {({values, invalid, form}) => {\n                    return (\n                        <Fragment>\n                            <Field name=\"name\" validate={required}>\n                                {(props) => (\n                                    <TextField\n                                        label=\"Название дома\"\n                                        margin=\"normal\"\n                                        name={props.input.name}\n                                        value={props.input.value}\n                                        onChange={props.input.onChange}\n                                        fullWidth={true}\n                                        variant=\"outlined\"\n                                    />\n                                )}\n                            </Field>\n                            <Field name=\"price\" validate={required}>\n                                {(props) => (\n                                    <TextField\n                                        label=\"Стоимость квартир в доме\"\n                                        margin=\"normal\"\n                                        inputProps={{min: '0', step: '1'}}\n                                        type=\"number\"\n                                        name={props.input.name}\n                                        value={props.input.value}\n                                        onChange={props.input.onChange}\n                                        fullWidth={true}\n                                        variant=\"outlined\"\n                                    />\n                                )}\n                            </Field>\n                            <Field name=\"parking\" type=\"radio\" defaultValue={'false'} validate={required}>\n                                {(props) => {\n                                    return (\n                                        <FormControl component=\"fieldset\">\n                                            <FormLabel component=\"legend\">Паркова</FormLabel>\n                                            <RadioGroup\n                                                defaultValue=\"false\"\n                                                aria-label=\"parking\"\n                                                row={true}\n                                                name={props.input.name}\n                                                value={values?.parking}\n                                                onChange={props.input.onChange}\n                                            >\n                                                <FormControlLabel value=\"true\" control={<Radio />} label=\"Есть\" />\n                                                <FormControlLabel value=\"false\" control={<Radio />} label=\"Нет\" />\n                                            </RadioGroup>\n                                        </FormControl>\n                                    );\n                                }}\n                            </Field>\n                            <Grid container={true} direction=\"row\" spacing={2} justify=\"flex-end\" alignItems=\"center\">\n                                <Grid justify=\"flex-end\" container={true} item={true} xs={6}>\n                                    <StyledLink\n                                        to={`/developers/${developerUuid}/apartmentComplex/${apartmentComplexUuid}/overview/houses`}\n                                    >\n                                        <StyledButton variant=\"outlined\" size=\"large\">\n                                            Отмена\n                                        </StyledButton>\n                                    </StyledLink>\n                                    <StyledButton\n                                        disabled={invalid}\n                                        onClick={() => {\n                                            outerProps.onSubmit(values);\n                                        }}\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        size=\"large\"\n                                    >\n                                        {outerProps.loading && <CircularProgress size={30} thickness={5} />}\n                                        Далее\n                                    </StyledButton>\n                                </Grid>\n                            </Grid>\n                        </Fragment>\n                    );\n                }}\n            </Form>\n        </Fragment>\n    );\n}\n","import {useTheme} from '@material-ui/core';\nimport Divider from '@material-ui/core/Divider';\nimport Drawer from '@material-ui/core/Drawer';\nimport IconButton from '@material-ui/core/IconButton';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ChevronRightIcon from '@material-ui/core/SvgIcon/SvgIcon';\nimport ApartmentIcon from '@material-ui/icons/Apartment';\nimport AppsIcon from '@material-ui/icons/Apps';\nimport PeopleAltIcon from '@material-ui/icons/PeopleAlt';\nimport BusinessCenterIcon from '@material-ui/icons/BusinessCenter';\nimport MonetizationOnIcon from '@material-ui/icons/MonetizationOn';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport HomeWorkIcon from '@material-ui/icons/HomeWork';\nimport clsx from 'clsx';\nimport * as React from 'react';\nimport {connect} from 'react-redux';\nimport styled from 'styled-components';\nimport {StyledLink} from '../../shared/components/styled';\n\ninterface SidebarProps {\n    open: boolean;\n    drawerStyles: any;\n    handleDrawerClose: () => void;\n    params?: any;\n}\n\nconst StyledDrawer = styled(Drawer)`\n    .MuiPaper-root {\n        color: #fff;\n        background-color: #37485c;\n    }\n\n    .MuiListItemIcon-root,\n    .MuiSvgIcon-root {\n        color: #fff;\n    }\n`;\nexport const Sidebar = connect((state) => ({\n    params: state.route.params\n}))(({open, handleDrawerClose, drawerStyles, params}: SidebarProps) => {\n    const theme = useTheme();\n    const {developerUuid, houseUuid} = params || {};\n\n    return (\n        <StyledDrawer\n            variant=\"permanent\"\n            className={clsx(drawerStyles.drawer, {\n                [drawerStyles.drawerOpen]: open,\n                [drawerStyles.drawerClose]: !open\n            })}\n            classes={{\n                paper: clsx({\n                    [drawerStyles.drawerOpen]: open,\n                    [drawerStyles.drawerClose]: !open\n                })\n            }}\n            open={open}\n        >\n            <div className={drawerStyles.toolbar}>\n                <IconButton onClick={handleDrawerClose}>\n                    {theme.direction === 'rtl' ? <ChevronRightIcon /> : <ChevronLeftIcon />}\n                </IconButton>\n            </div>\n            <Divider />\n            <List>\n                <StyledLink to=\"/\">\n                    <ListItem button>\n                        <ListItemIcon>{<BusinessCenterIcon />}</ListItemIcon>\n                        <ListItemText primary=\"Застройщики\" />\n                    </ListItem>\n                </StyledLink>\n                {developerUuid && (\n                    <StyledLink to={`/developers/${developerUuid}/chessgrid`}>\n                        <ListItem button>\n                            <ListItemIcon>{<AppsIcon />}</ListItemIcon>\n                            <ListItemText primary=\"Шахматка\" />\n                        </ListItem>\n                    </StyledLink>\n                )}\n                {houseUuid && (\n                    <StyledLink to={`/developers/${developerUuid}/houseGrid/${houseUuid}`}>\n                        <ListItem button>\n                            <ListItemIcon>{<HomeWorkIcon />}</ListItemIcon>\n                            <ListItemText primary=\"Шахматка дома\" />\n                        </ListItem>\n                    </StyledLink>\n                )}\n                {developerUuid && (\n                    <StyledLink to={`/developers/${developerUuid}/apartmentComplexes`}>\n                        <ListItem button>\n                            <ListItemIcon>{<ApartmentIcon />}</ListItemIcon>\n                            <ListItemText primary=\"ЖК\" />\n                        </ListItem>\n                    </StyledLink>\n                )}\n                {developerUuid && (\n                    <StyledLink to={`/developers/${developerUuid}/contacts`}>\n                        <ListItem button>\n                            <ListItemIcon>{<PeopleAltIcon />}</ListItemIcon>\n                            <ListItemText primary=\"Клиенты\" />\n                        </ListItem>\n                    </StyledLink>\n                )}\n                {developerUuid && (\n                    <StyledLink to={`/developers/${developerUuid}/trades`}>\n                        <ListItem button>\n                            <ListItemIcon>{<MonetizationOnIcon />}</ListItemIcon>\n                            <ListItemText primary=\"Сделки\" />\n                        </ListItem>\n                    </StyledLink>\n                )}\n            </List>\n            <Divider />\n        </StyledDrawer>\n    );\n});\n","import {useQuery} from '@apollo/react-hooks';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport React, {lazy, Suspense} from 'react';\nimport {Redirect, Route, Switch} from 'react-router-dom';\nimport styled from 'styled-components';\nimport {GET_USER_INFO} from '../../graphql/queries/userQuery';\nimport {\n    ApartmentComplexCreateForm,\n    ApartmentComplexEditForm\n} from './ApartmentComplexBuilder/ApartmentComplexForm/ApartmentComplexForm';\nimport {DeveloperCreateForm, DeveloperEditForm} from './Developer/DeveloperForm';\nimport {useStyles} from './drawerStyles';\nimport {Header} from './Header/Header';\nimport {HouseCreateForm, HouseEditForm} from './HouseBuilder/HouseForm/HouseForm';\nimport {Sidebar} from './Sidebar/Sidebar';\n\nconst Content = styled.div`\n    position: relative;\n    max-width: 100%;\n    overflow-y: scroll;\n`;\n\nconst ChessGrid = lazy(() => import('./ChessGrid/ChessGrid'));\nconst UserList = lazy(() => import('./Users/UserList'));\nconst ApartmentComplexList = lazy(() => import('./ApartmentComplexList/ApartmentComplexList'));\nconst MainChessGrid = lazy(() => import('./MainChessGrid/MainChessGrid'));\nconst DeveloperList = lazy(() => import('./Developer/DeveloperList'));\nconst Contacts = lazy(() => import('./Contacts/Contacts'));\nconst Trades = lazy(() => import('./Trades/Trades'));\nconst HouseInfo = lazy(() => import('./HouseBuilder/HouseInfo/HouseInfo'));\nconst ApartmentComplexInfo = lazy(() => import('./ApartmentComplexBuilder/ApartmentComplexInfo/ApartmentComplexInfo'));\n\nexport function Main() {\n    const {data, loading} = useQuery(GET_USER_INFO, {\n        fetchPolicy: 'cache-and-network'\n    });\n    const [open, setOpen] = React.useState(false);\n    const drawerStyles = useStyles();\n\n    if (loading) {\n        return <span>Loading...</span>;\n    }\n\n    if (!data || !data.getUserInfo) {\n        return <Redirect to=\"/login\" />;\n    }\n    return (\n        <div className={drawerStyles.root}>\n            <CssBaseline />\n            <Header\n                drawerStyles={drawerStyles}\n                open={open}\n                handleDrawerOpen={() => {\n                    setOpen(true);\n                }}\n            />\n            <Sidebar\n                drawerStyles={drawerStyles}\n                open={open}\n                handleDrawerClose={() => {\n                    setOpen(false);\n                }}\n            />\n            <Content className={drawerStyles.content}>\n                <div className={drawerStyles.toolbar} />\n\n                <Suspense fallback={<div>Loading...</div>}>\n                    <Switch>\n                        <Route exact={true} path=\"/developers/:developerUuid/apartmentComplexes\">\n                            <ApartmentComplexList />\n                        </Route>\n                        <Route exact={true} path=\"/developers/:developerUuid/chessgrid\">\n                            <MainChessGrid />\n                        </Route>\n                        <Route exact={true} path=\"/users\">\n                            <UserList />\n                        </Route>\n                        <Route exact={true} path=\"/developers\">\n                            <DeveloperList />\n                        </Route>\n                        <Route exact={true} path=\"/developer/new\">\n                            <DeveloperCreateForm />\n                        </Route>\n                        <Route exact={true} path=\"/developer/:developerUuid/edit\">\n                            <DeveloperEditForm />\n                        </Route>\n                        <Route exact={true} path=\"/developers/:developerUuid/contacts\">\n                            <Contacts />\n                        </Route>\n                        <Route exact={true} path=\"/developers/:developerUuid/trades\">\n                            <Trades />\n                        </Route>\n                        <Route exact={true} path=\"/developers/:developerUuid/apartmentComplex/new\">\n                            <ApartmentComplexCreateForm />\n                        </Route>\n                        <Route\n                            exact={true}\n                            path=\"/developers/:developerUuid/apartmentComplex/:apartmentComplexUuid/edit\"\n                        >\n                            <ApartmentComplexEditForm />\n                        </Route>\n                        <Route path=\"/developers/:developerUuid/apartmentComplex/:apartmentComplexUuid/overview\">\n                            <ApartmentComplexInfo />\n                        </Route>\n                        <Route path=\"/developers/:developerUuid/apartmentComplex/:apartmentComplexUuid/house/:houseUuid\">\n                            <HouseInfo />\n                        </Route>\n                        <Route path=\"/developers/:developerUuid/apartmentComplex/:apartmentComplexUuid/houseGrid/:houseUuid\">\n                            <ChessGrid />\n                        </Route>\n                        <Route\n                            exact={true}\n                            path=\"/developers/:developerUuid/apartmentComplex/:apartmentComplexUuid/create/house\"\n                        >\n                            <HouseCreateForm />\n                        </Route>\n                        <Route\n                            exact={true}\n                            path=\"/developers/:developerUuid/apartmentComplex/:apartmentComplexUuid/houseEdit/:houseUuid\"\n                        >\n                            <HouseEditForm />\n                        </Route>\n                        <Route path=\"*\">\n                            <DeveloperList />\n                        </Route>\n                    </Switch>\n                </Suspense>\n            </Content>\n        </div>\n    );\n}\n\nexport default Main;\n","import {Card, CardMedia, Fab} from '@material-ui/core';\nimport {Link, NavLink} from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const StyledLink = styled(Link)`\n    text-decoration: none;\n\n    &:focus,\n    &:hover,\n    &:visited,\n    &:link,\n    &:active {\n        text-decoration: none;\n        color: inherit;\n    }\n`;\n\nexport const StyledNavLink = styled(NavLink)`\n    text-decoration: none;\n\n    &:focus,\n    &:hover,\n    &:visited,\n    &:link,\n    &:active {\n        text-decoration: none;\n        color: inherit;\n    }\n\n    &.Mui-selected > div {\n        color: white;\n        background-color: #37485c;\n        &:hover {\n            background-color: #5d7a9c;\n        }\n    }\n`;\n\nexport const FabButtonContainer = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n`;\n\nexport const StyledFab = styled(Fab)`\n    &.MuiFab-root {\n        width: 140px;\n        height: 140px;\n        .MuiSvgIcon-root {\n            width: 3em;\n            height: 3em;\n        }\n    }\n`;\n\nconst getColor = (props: any) => {\n    if (props.isDragAccept) {\n        return '#00e676';\n    }\n    if (props.isDragReject) {\n        return '#ff1744';\n    }\n    if (props.isDragActive) {\n        return '#2196f3';\n    }\n    return '#eeeeee';\n};\n\nexport const DropzoneContainer = styled.div`\n    flex: 1;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    padding: 20px;\n    border-width: 2px;\n    border-radius: 2px;\n    border-color: ${(props) => getColor(props)};\n    border-style: dashed;\n    background-color: #fafafa;\n    color: #bdbdbd;\n    outline: none;\n    transition: border 0.24s ease-in-out;\n`;\n\nexport const StyledCard = styled(Card)`\n    max-width: 345px;\n    width: 100%;\n`;\n\nexport const StyledCardMedia = styled(CardMedia)`\n    height: 0;\n    padding-top: 56.25%;\n`;\n","import {gql} from 'apollo-boost';\nimport {Flat} from '../../components/shared/types/flat.types';\n\nexport const HOUSE_LIST = gql`\n    query getHouses($apartmentComplexId: String!) {\n        getHouses(apartmentComplexId: $apartmentComplexId) {\n            id\n            name\n            images {\n                CHESS_GRID {\n                    uuid\n                    downloadUrl\n                }\n            }\n        }\n    }\n`;\n\nexport const HOUSE_INFO = gql`\n    query getHouse($uuid: String!) {\n        getHouse(uuid: $uuid) {\n            id\n            name\n            parking\n            price\n            publishedDate\n            images {\n                CHESS_GRID {\n                    uuid\n                    downloadUrl\n                }\n                SITE {\n                    uuid\n                    downloadUrl\n                }\n                MOBILE {\n                    uuid\n                    downloadUrl\n                }\n                PHOTO {\n                    uuid\n                    downloadUrl\n                    name\n                }\n                VR {\n                    uuid\n                    downloadUrl\n                    name\n                    previewImageUrl\n                }\n                HALF_VR {\n                    uuid\n                    downloadUrl\n                    name\n                    previewImageUrl\n                }\n            }\n        }\n    }\n`;\n\nexport const HOUSE_DATA = gql`\n    query getHouse($uuid: String!) {\n        getHouse(uuid: $uuid) {\n            id\n            name\n            parking\n            price\n        }\n    }\n`;\n\nexport interface GroupedFlats {\n    id: string;\n    section: string;\n    levels: Array<{\n        id: string;\n        level: number;\n        flats: Flat[];\n    }>;\n}\n\nexport interface FlatsInHouse {\n    id: string;\n    name: string;\n    groupedFlats: GroupedFlats[];\n}\n\nexport interface GetGroupedFlatsBySectionQuery {\n    getGroupedFlatsBySection: {\n        maxPrice: number;\n        minPrice: number;\n        maxArea: number;\n        minArea: number;\n        houseFlats: FlatsInHouse[];\n    };\n}\n\nexport const GET_PUBLIC_GROUPED_FLATS_CHESSGRID = gql`\n    query getPublicGroupedFlatsBySection($uuid: [String]) {\n        getGroupedFlatsBySection: getPublicGroupedFlatsBySection(uuid: $uuid) {\n            maxPrice\n            minPrice\n            maxArea\n            minArea\n            houseFlats {\n                id\n                name\n                groupedFlats {\n                    id\n                    section\n                    levels {\n                        id\n                        level\n                        flats {\n                            id\n                            flatNumber\n                            levelAmount\n                            fakeLevel\n                            price\n                            level\n                            section\n                            area\n                            status\n                            sale\n                            squarePrice\n                            roomAmount\n                        }\n                    }\n                }\n            }\n        }\n    }\n`;\n\nexport const GET_GROUPED_FLATS_CHESSGRID = gql`\n    query getGroupedFlatsBySection($uuid: [String]) {\n        getGroupedFlatsBySection(uuid: $uuid) {\n            maxPrice\n            minPrice\n            maxArea\n            minArea\n            houseFlats {\n                id\n                name\n                groupedFlats {\n                    id\n                    section\n                    levels {\n                        id\n                        level\n                        flats {\n                            id\n                            flatNumber\n                            levelAmount\n                            fakeLevel\n                            price\n                            level\n                            section\n                            area\n                            status\n                            sale\n                            squarePrice\n                            roomAmount\n                        }\n                    }\n                }\n            }\n        }\n    }\n`;\nexport const GET_GROUPED_FLATS = gql`\n    query getGroupedHouseData($uuid: String!) {\n        getGroupedHouseData(uuid: $uuid) {\n            groupedFlats {\n                id\n                section\n                levels {\n                    id\n                    level\n                    flats {\n                        id\n                        flatNumber\n                        price\n                        level\n                        section\n                        area\n                        status\n                        squarePrice\n                        sale\n                        roomAmount\n                        levelAmount\n                    }\n                }\n            }\n        }\n    }\n`;\n","export const setRouteParams = (params) => ({\n    type: 'SET_ROUTES',\n    payload: {\n        params\n    }\n});\n\nexport const setTitle = (title) => ({\n    type: 'SET_TITLE',\n    payload: {\n        title\n    }\n});\n","import {gql} from 'apollo-boost';\n\nexport const CREATE_APARTMENT_COMPLEX = gql`\n    mutation createComplex($developerUuid: String!, $apartmentComplex: ApartmentComplexInput!) {\n        createApartmentComplex(developerUuid: $developerUuid, apartmentComplex: $apartmentComplex) {\n            id\n        }\n    }\n`;\n\nexport const DELETE_APARTMENT_COMPLEX = gql`\n    mutation deleteApartmentComplex($uuid: String!) {\n        deleteApartmentComplex(uuid: $uuid)\n    }\n`;\n\nexport const EDIT_APARTMENT_COMPLEX = gql`\n    mutation updateApartmentComplex($uuid: String!, $apartmentComplex: ApartmentComplexInput!) {\n        updateApartmentComplex(uuid: $uuid, apartmentComplex: $apartmentComplex) {\n            id\n        }\n    }\n`;\n\nexport const UPLOAD_FILE = gql`\n    mutation addImage($file: Upload!, $mode: String!, $uuid: String!, $name: String) {\n        addImage(file: $file, mode: $mode, uuid: $uuid, name: $name) {\n            downloadUrl\n        }\n    }\n`;\n\nexport const DELETE_IMAGE = gql`\n    mutation deleteImage($mode: String!, $uuid: String!, $imageId: String!) {\n        deleteImage(mode: $mode, uuid: $uuid, imageId: $imageId)\n    }\n`;\n\nexport const UPLOAD_SPREADSHEET = gql`\n    mutation uploadApartmentComplexFile($uuid: String!, $file: Upload!) {\n        uploadApartmentComplexFile(uuid: $uuid, file: $file) {\n            house\n            flats {\n                flatNumber\n                levelAmount\n                price\n                level\n                section\n                area\n                status\n                roomAmount\n                sale\n                squarePrice\n            }\n        }\n    }\n`;\n\nexport const ASSIGN_FLATS = gql`\n    mutation assignFlats($data: [HosueWithFlats]) {\n        assignFlats(data: $data)\n    }\n`;\n","import {gql} from 'apollo-boost';\n\nexport const ALL_APARTMENT_COMPLEXES = gql`\n    query getAllApartmentComplexes($developerUuid: String!) {\n        getAllApartmentComplexes(developerUuid: $developerUuid) {\n            id\n            name\n            images {\n                CHESS_GRID {\n                    uuid\n                    downloadUrl\n                }\n            }\n        }\n    }\n`;\n\nexport const APARTMENT_COMPLEX_DROPDOWNS = gql`\n    {\n        cities {\n            key\n            displayName\n            districts {\n                key\n                displayName\n            }\n        }\n        apartmentComplexClasses {\n            key\n            displayName\n        }\n        apartmentComplexTypes {\n            key\n            displayName\n        }\n    }\n`;\n\nexport const APARTMENT_COMPLEX_INFO = gql`\n    query getApartmentComplex($uuid: String!) {\n        getApartmentComplex(uuid: $uuid) {\n            id\n            type {\n                displayName\n            }\n            name\n            city {\n                displayName\n            }\n            district {\n                displayName\n            }\n            class {\n                displayName\n            }\n            address\n            levels\n            sections\n            price\n            beginDate\n            endDate\n            images {\n                CHESS_GRID {\n                    uuid\n                    downloadUrl\n                }\n                SITE {\n                    uuid\n                    downloadUrl\n                }\n                MOBILE {\n                    uuid\n                    downloadUrl\n                }\n                PHOTO {\n                    uuid\n                    downloadUrl\n                    name\n                }\n                VR {\n                    uuid\n                    downloadUrl\n                    name\n                    previewImageUrl\n                }\n                HALF_VR {\n                    uuid\n                    downloadUrl\n                    name\n                    previewImageUrl\n                }\n            }\n        }\n    }\n`;\n\nexport const GET_EDIT_APARTMENT_COMPLEX_INFO = gql`\n    query getApartmentComplex($uuid: String!) {\n        getApartmentComplex(uuid: $uuid) {\n            id\n            type {\n                key\n                displayName\n            }\n            name\n            city {\n                key\n                displayName\n            }\n            district {\n                key\n                displayName\n            }\n            class {\n                key\n                displayName\n            }\n            address\n            levels\n            sections\n            price\n            beginDate\n            endDate\n        }\n    }\n`;\n","import {gql} from 'apollo-boost';\n\nexport const DEVELOPER_DROPDOWNS = gql`\n    {\n        cities {\n            key\n            displayName\n            districts {\n                key\n                displayName\n            }\n        }\n    }\n`;\n\nexport const GET_DEVELOPERS = gql`\n    query getDevelopers {\n        getDevelopers {\n            id\n            name\n            city\n            address\n            emails\n            receptionNumbers\n            salesNumbers\n            logo {\n                uuid\n                downloadUrl\n            }\n        }\n    }\n`;\n\nexport const GET_DEVELOPER = gql`\n    query getDeveloper($uuid: String!) {\n        getDeveloper(uuid: $uuid) {\n            id\n            name\n            city\n            address\n            emails\n            receptionNumbers\n            salesNumbers\n            logo {\n                uuid\n                downloadUrl\n            }\n        }\n    }\n`;\n\nexport const GET_DEVELOPER_APARTMENT_COMPLEXES = gql`\n    query getApartmentComplexesByDeveloper($uuid: String!) {\n        getApartmentComplexesByDeveloper(uuid: $uuid) {\n            id\n            name\n            images {\n                CHESS_GRID {\n                    uuid\n                    downloadUrl\n                }\n            }\n            houses {\n                id\n                name\n                images {\n                    CHESS_GRID {\n                        uuid\n                        downloadUrl\n                    }\n                }\n            }\n        }\n    }\n`;\n\nexport const GET_PUBLIC_DEVELOPER_APARTMENT_COMPLEXES = gql`\n    query getPublicApartmentComplexesByDeveloper($uuid: String!) {\n        getApartmentComplexesByDeveloper: getPublicApartmentComplexesByDeveloper(uuid: $uuid) {\n            id\n            name\n            images {\n                CHESS_GRID {\n                    uuid\n                    downloadUrl\n                }\n            }\n            houses {\n                id\n                name\n                images {\n                    CHESS_GRID {\n                        uuid\n                        downloadUrl\n                    }\n                }\n            }\n        }\n    }\n`;\n","import {gql} from 'apollo-boost';\n\nexport const CREATE_HOUSE = gql`\n    mutation createHouse($apartmentComplexId: String!, $houseData: HouseInput!) {\n        createHouse(apartmentComplexId: $apartmentComplexId, houseData: $houseData) {\n            name\n        }\n    }\n`;\n\nexport const UPLOAD_FILE = gql`\n    mutation addHouseImage($file: Upload!, $mode: String!, $uuid: String!, $name: String) {\n        addHouseImage(file: $file, mode: $mode, uuid: $uuid, name: $name) {\n            downloadUrl\n        }\n    }\n`;\n\nexport const DELETE_HOUSE = gql`\n    mutation deleteHouse($uuid: String!) {\n        deleteHouse(uuid: $uuid)\n    }\n`;\n\nexport const UPDATE_HOUSE = gql`\n    mutation updateHouse($uuid: String!, $houseData: HouseInput!) {\n        updateHouse(uuid: $uuid, houseData: $houseData) {\n            name\n        }\n    }\n`;\n\nexport const DELETE_IMAGE = gql`\n    mutation deleteHouseImage($mode: String!, $uuid: String!, $imageId: String!) {\n        deleteHouseImage(mode: $mode, uuid: $uuid, imageId: $imageId)\n    }\n`;\n\nexport const REORDER_LEVELS = gql`\n    mutation reorderLevels($sectionId: String!, $oldIndex: Int!, $newIndex: Int!) {\n        reorderLevels(sectionId: $sectionId, oldIndex: $oldIndex, newIndex: $newIndex)\n    }\n`;\n\nexport const PUBLISH_HOUSE = gql`\n    mutation publishHouse($uuid: String!) {\n        publishHouse(uuid: $uuid)\n    }\n`;\n","import {gql} from 'apollo-boost';\n\nexport const GET_USER_INFO = gql`\n    query getUserInfo {\n        getUserInfo {\n            id\n            name\n            email\n            role {\n                key\n                displayName\n                features\n            }\n        }\n    }\n`;\n\nexport const GET_USERS = gql`\n    query getUsers {\n        getUsers {\n            id\n            name\n            email\n            role {\n                key\n                displayName\n                features\n            }\n            isDeleted\n        }\n    }\n`;\n\nexport const GET_ROLES = gql`\n    query getRoles {\n        userRoles {\n            key\n            displayName\n            features\n        }\n    }\n`;\n","import {createStyles, makeStyles, Theme} from '@material-ui/core';\n\nconst drawerWidth = 240;\n\nexport const useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            display: 'flex'\n        },\n        appBar: {\n            zIndex: theme.zIndex.drawer + 1,\n            transition: theme.transitions.create(['width', 'margin'], {\n                easing: theme.transitions.easing.sharp,\n                duration: theme.transitions.duration.leavingScreen\n            })\n        },\n        appBarShift: {\n            marginLeft: drawerWidth,\n            width: `calc(100% - ${drawerWidth}px)`,\n            transition: theme.transitions.create(['width', 'margin'], {\n                easing: theme.transitions.easing.sharp,\n                duration: theme.transitions.duration.enteringScreen\n            })\n        },\n        menuButton: {\n            marginRight: 36\n        },\n        hide: {\n            display: 'none'\n        },\n        drawer: {\n            width: drawerWidth,\n            flexShrink: 0,\n            whiteSpace: 'nowrap'\n        },\n        drawerOpen: {\n            width: drawerWidth,\n            transition: theme.transitions.create('width', {\n                easing: theme.transitions.easing.sharp,\n                duration: theme.transitions.duration.enteringScreen\n            })\n        },\n        drawerClose: {\n            transition: theme.transitions.create('width', {\n                easing: theme.transitions.easing.sharp,\n                duration: theme.transitions.duration.leavingScreen\n            }),\n            overflowX: 'hidden',\n            width: theme.spacing(7) + 1,\n            [theme.breakpoints.up('sm')]: {\n                width: theme.spacing(9) + 1\n            }\n        },\n        toolbar: {\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'flex-end',\n            padding: theme.spacing(0, 1),\n            ...theme.mixins.toolbar\n        },\n        content: {\n            flexGrow: 1,\n            padding: theme.spacing(3)\n        }\n    })\n);\n","import {gql} from 'apollo-boost';\n\nexport const CREATE_DEVELOPER = gql`\n    mutation createDeveloper($developerData: DeveloperInput!, $image: Upload) {\n        createDeveloper(developerData: $developerData, image: $image) {\n            id\n        }\n    }\n`;\n\nexport const UPDATE_DEVELOPER = gql`\n    mutation updateDeveloper($id: String!, $developerData: DeveloperInput!, $image: Upload) {\n        updateDeveloper(id: $id, developerData: $developerData, image: $image) {\n            id\n        }\n    }\n`;\n\nexport const DELETE_DEVELOPER = gql`\n    mutation deleteDeveloper($id: String!) {\n        deleteDeveloper(id: $id)\n    }\n`;\n"],"sourceRoot":""}