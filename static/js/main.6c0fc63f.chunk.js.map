{"version":3,"sources":["core/validators/validators.ts","graphql/mutations/authMutation.ts","components/InputValidate.tsx","components/Authentication/Login/Login.styles.tsx","components/Authentication/Login/Login.tsx","core/apollo/client.ts","redux/reducers/route.ts","redux/reducers/rootReducer.ts","App.tsx","serviceWorker.ts","index.tsx","components/shared/types/flat.types.ts","core/constants/index.ts"],"names":["getError","meta","error","touched","constraints","email","isRequired","value","undefined","isNumber","validate","isEmail","notRequiredAndIsNumber","isRequiredAndIsNumber","isRequiredAndIsInteger","isInteger","validateLoginForm","form","password","errors","test","LOGIN","gql","AUTH_APP","CREATE_USER","Input","styled","div","InputError","InputValidate","fieldName","id","label","type","name","input","TextField","fullWidth","variant","LoginForm","StyleForm","initialValues","Login","useMutation","login","data","handleFormSubmit","formObj","a","variables","catch","Cookies","set","TOKEN","token","expires","to","onSubmit","values","render","handleSubmit","Button","color","onClick","httpLink","createUploadLink","uri","process","authLink","setContext","_","headers","get","apiToken","API_TOKEN","authorization","errorLink","onError","graphQLErrors","networkError","forEach","extensions","message","locations","path","code","console","window","location","href","client","ApolloClient","link","concat","cache","InMemoryCache","dataIdFromObject","object","__typename","key","displayName","defaultDataIdFromObject","route","state","action","payload","params","title","combineReducers","Main","lazy","Public","store","createStore","rootReducer","App","utils","DateFnsUtils","locale","ruLocale","basename","fallback","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","FlatStatus","apartmentComplexDefaultImage","houseDefaultImage","flatDefaultImage","FLAT_STATUSES","UNAVAILABLE","SOLD_OUT","RESERVED","DOCUMENTS_IN_PROGRESS","BOOKED","FREE"],"mappings":"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","file":"static/js/main.6c0fc63f.chunk.js","sourcesContent":["import validate from 'validate.js';\nimport {LoginFormInterface} from '../../components/Authentication/Login/Login';\n\nexport function getError(meta: any) {\n    if (meta.error && meta.touched) {\n        return meta.error;\n    }\n\n    return undefined;\n}\nconst constraints = {\n    email: {\n        email: true\n    }\n};\n\nexport const isRequired = (value: any) => (value ? undefined : 'Обязательное поле');\nexport const isNumber = (value: any) => {\n    return validate.isNumber(+value) ? undefined : 'Это числовое поле';\n};\nexport const isInteger = (value: any) => {\n    return validate.isInteger(+value) ? undefined : 'Это целое число';\n};\n\nexport const isEmail = (email: any) => {\n    return !validate({email}, constraints) ? undefined : 'Это электронная почта';\n};\nexport const notRequiredAndIsNumber = (value: any) => {\n    if (value === undefined || value === null) {\n        return undefined;\n    }\n\n    return isNumber(value);\n};\nexport const isRequiredAndIsNumber = (value: any) => {\n    return isRequired(value) || isNumber(value);\n};\nexport const isRequiredAndIsInteger = (value: any) => {\n    return isRequired(value) || isInteger(value);\n};\nexport const validateEmail = (email: string) => {\n    return !isRequired(email) && !validate({email}, constraints);\n};\nexport const validatePassword = (password: string) => {\n    const regex = /(?=.*\\d)(?=.*[a-z]).{6,}/;\n    return regex.test(password);\n};\n\nexport const validateLoginForm = (form: LoginFormInterface) => {\n    const errors: any = {};\n    if (!validateEmail(form.email)) {\n        errors.email = 'Неверно указана почта';\n    }\n    if (!validatePassword(form.password)) {\n        errors.password = 'Пароль должен содержать минимум 6 символов, заглавную букву и цифру';\n    }\n    return errors;\n};\n","import {gql} from 'apollo-boost';\n\nexport const LOGIN = gql`\n    mutation login($email: String!, $password: String!) {\n        login(email: $email, password: $password) {\n            token\n        }\n    }\n`;\n\nexport const AUTH_APP = gql`\n    mutation authApp($apiKey: String!) {\n        authApp(apiKey: $apiKey) {\n            token\n        }\n    }\n`;\n\nexport const CREATE_USER = gql`\n    mutation createUser($userData: UserInput) {\n        createUser(userData: $userData) {\n            id\n        }\n    }\n`;\n\nexport const LOGOUT = gql`\n    mutation logout($key: String!) {\n        logout(key: $key)\n    }\n`;\n","import {TextField} from '@material-ui/core';\nimport React, {Fragment} from 'react';\nimport {Field} from 'react-final-form';\nimport styled from 'styled-components';\n\ninterface Props {\n    fieldName: string;\n    id: string;\n    label: string;\n    type: string;\n    variant: string;\n}\n\nconst Input = styled.div`\n    display: flex;\n    margin-bottom: 20px;\n    width: 60%;\n    flex-direction: column;\n`;\n\nconst InputError = styled.div`\n    font-size: 12px;\n    color: #d73c2a;\n    text-align: center;\n    margin-top: 8px;\n`;\n\nconst InputValidate: React.FC<Props> = ({fieldName, id, label, type}) => {\n    return (\n        <Input>\n            <Field name={fieldName}>\n                {({input, meta}) => (\n                    <Fragment>\n                        <TextField fullWidth variant=\"outlined\" id={id} label={label} type={type} {...input} />\n                        {meta.error && meta.touched && <InputError>{meta.error}</InputError>}\n                    </Fragment>\n                )}\n            </Field>\n        </Input>\n    );\n};\n\nexport default InputValidate;\n","import styled from 'styled-components';\n\nexport const LoginForm = styled.div`\n    width: 60%;\n    margin: 300px auto;\n`;\n\nexport const StyleForm = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-direction: column;\n`;\n","import {useMutation} from '@apollo/react-hooks';\nimport Button from '@material-ui/core/Button';\nimport Cookies from 'js-cookie';\nimport * as React from 'react';\nimport {Form} from 'react-final-form';\nimport {Redirect} from 'react-router-dom';\nimport {TOKEN} from '../../../core/constants';\nimport {validateLoginForm} from '../../../core/validators/validators';\nimport {LOGIN} from '../../../graphql/mutations/authMutation';\nimport InputValidate from '../../InputValidate';\nimport {LoginForm, StyleForm} from './Login.styles';\n\nexport interface LoginFormInterface {\n    email: string;\n    password: string;\n}\n\nconst initialValues: LoginFormInterface = {\n    email: '',\n    password: ''\n};\n\nexport function Login() {\n    const [login, {data, error}] = useMutation(LOGIN);\n    const handleFormSubmit = async (formObj: any) => {\n        await login({\n            variables: {email: formObj.email, password: formObj.password}\n        }).catch(() => {});\n    };\n\n    if (data) {\n        Cookies.set(TOKEN, data.login.token, {expires: 1});\n        return <Redirect to=\"/\" />;\n    }\n    return (\n        <LoginForm>\n            <Form\n                onSubmit={(formObj: LoginFormInterface) => {\n                    handleFormSubmit(formObj);\n                }}\n                initialValues={initialValues}\n                validate={(values: LoginFormInterface) => {\n                    return validateLoginForm(values);\n                }}\n                render={({handleSubmit}) => (\n                    <StyleForm>\n                        <InputValidate id=\"email\" label=\"Email\" variant=\"outlined\" fieldName=\"email\" type=\"email\" />\n                        <InputValidate\n                            id=\"password\"\n                            label=\"Пароль\"\n                            variant=\"outlined\"\n                            fieldName=\"password\"\n                            type=\"password\"\n                        />\n                        {error && <div>Неправильное имя пользователя или пароль</div>}\n                        <Button type=\"submit\" variant=\"outlined\" color=\"primary\" onClick={handleSubmit}>\n                            Войти\n                        </Button>\n                    </StyleForm>\n                )}\n            />\n        </LoginForm>\n    );\n}\n","import {defaultDataIdFromObject, InMemoryCache} from 'apollo-cache-inmemory';\nimport {ApolloClient} from 'apollo-client';\nimport {setContext} from 'apollo-link-context';\nimport {onError} from 'apollo-link-error';\nimport {createUploadLink} from 'apollo-upload-client';\nimport Cookies from 'js-cookie';\nimport {API_TOKEN, TOKEN} from '../constants';\n\nconst httpLink = createUploadLink({\n    uri: process.env.REACT_APP_GRAPHQL_URL\n});\n\nconst authLink = setContext((_, {headers}) => {\n    const token = Cookies.get(TOKEN);\n    const apiToken = Cookies.get(API_TOKEN);\n    return {\n        headers: {\n            ...headers,\n            authorization: token ? token : '',\n            apiToken: apiToken ? apiToken : ''\n        }\n    };\n});\n\nconst errorLink = onError(({graphQLErrors, networkError}) => {\n    if (graphQLErrors) {\n        graphQLErrors.forEach(({extensions, message, locations, path}) => {\n            if (extensions?.code === 'UNAUTHENTICATED') {\n                window.location.href = '/login';\n                return;\n            }\n\n            console.error(`[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`);\n        });\n    }\n\n    if (networkError) {\n        console.error(`[Network error]: ${networkError}`);\n    }\n});\n\nexport const client = new ApolloClient({\n    link: errorLink.concat(authLink).concat(httpLink),\n    cache: new InMemoryCache({\n        dataIdFromObject: (object: any) => {\n            switch (object.__typename) {\n                case 'KeyDisplayName':\n                    return object.key + object.displayName;\n                default:\n                    return defaultDataIdFromObject(object); // fall back to default handling\n            }\n        }\n    })\n});\n","const route = (state: any = {}, action) => {\n    switch (action.type) {\n        case 'SET_ROUTES':\n            if (!!action.payload.params['0']) {\n                return {...state, params: null};\n            }\n            return {...state, params: action.payload.params};\n        case 'SET_TITLE':\n            return {...state, title: action.payload.title};\n        default:\n            return state;\n    }\n};\n\nexport default route;\n","import {combineReducers} from 'redux';\nimport route from './route';\nexport default combineReducers({route});\n","import {ApolloProvider} from '@apollo/react-hooks';\nimport DateFnsUtils from '@date-io/date-fns';\nimport {MuiPickersUtilsProvider} from '@material-ui/pickers';\nimport ruLocale from 'date-fns/locale/ru';\nimport React, {lazy, Suspense} from 'react';\nimport {Provider} from 'react-redux';\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\nimport {createStore} from 'redux';\nimport {Login} from './components/Authentication/Login/Login';\nimport {client} from './core/apollo/client';\nimport rootReducer from './redux/reducers/rootReducer';\n\nconst Main = lazy(() => import('./components/Main/Main'));\nconst Public = lazy(() => import('./components/Public/Public'));\n\nconst store = createStore(rootReducer);\nconst App: React.FC = () => {\n    return (\n        <ApolloProvider client={client}>\n            <Provider store={store}>\n                <MuiPickersUtilsProvider utils={DateFnsUtils} locale={ruLocale}>\n                    <Router basename={process.env.PUBLIC_URL}>\n                        <Suspense fallback={<div>Loading...</div>}>\n                            <Switch>\n                                <Route path=\"/login\">\n                                    <Login />\n                                </Route>\n                                <Route path=\"/public\">\n                                    <Public />\n                                </Route>\n                                <Route path=\"/\">\n                                    <Main />\n                                </Route>\n                            </Switch>\n                        </Suspense>\n                    </Router>\n                </MuiPickersUtilsProvider>\n            </Provider>\n        </ApolloProvider>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ninterface Config {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n}\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL((process as {env: {[key: string]: string}}).env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'react-photoswipe/lib/photoswipe.css';\nimport App from './App';\nimport './index.scss';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import {HouseLayout} from './layout.types';\n\nexport enum FlatStatus {\n    SOLD_OUT = 'SOLD_OUT',\n    FREE = 'FREE',\n    RESERVED = 'RESERVED',\n    BOOKED = 'BOOKED',\n    UNAVAILABLE = 'UNAVAILABLE',\n    DOCUMENTS_IN_PROGRESS = 'DOCUMENTS_IN_PROGRESS'\n}\n\nexport interface ParsedFlat {\n    house: string;\n    flatNumber: string;\n    price: string;\n    sale: string;\n    level: string;\n    section: string;\n    area: string;\n    squarePrice: string;\n    status: FlatStatus;\n    roomAmount: string;\n    levelAmount: string;\n}\n\nexport interface Flat {\n    id: string;\n    flatNumber: string;\n    levelAmount: number;\n    price: number;\n    sale?: number;\n    level: number;\n    section: string;\n    area: number;\n    squarePrice: number;\n    status: FlatStatus;\n    roomAmount: string;\n    belongsToLayout?: boolean;\n    hasLayout?: boolean;\n    layout?: HouseLayout;\n    isActive?: boolean;\n}\n","import {FlatStatus} from '../../components/shared/types/flat.types';\n\nexport const apartmentComplexDefaultImage =\n    'https://images.all-free-download.com/images/graphicthumb/city_background_buildings_icon_colored_flat_outline_6838998.jpg';\n\nexport const houseDefaultImage =\n    'https://images.all-free-download.com/images/graphicthumb/city_background_buildings_icon_colored_flat_outline_6838998.jpg';\n\nexport const flatDefaultImage =\n    'https://images.all-free-download.com/images/graphicthumb/city_background_buildings_icon_colored_flat_outline_6838998.jpg';\n\nexport const FLAT_STATUSES = [\n    {\n        value: FlatStatus.UNAVAILABLE,\n        label: 'Недоступно'\n    },\n    {\n        value: FlatStatus.SOLD_OUT,\n        label: 'Продано'\n    },\n    {\n        value: FlatStatus.RESERVED,\n        label: 'Резерв'\n    },\n    {\n        value: FlatStatus.DOCUMENTS_IN_PROGRESS,\n        label: 'Оформление документов'\n    },\n    {\n        value: FlatStatus.BOOKED,\n        label: 'Забронировано'\n    },\n    {\n        value: FlatStatus.FREE,\n        label: 'Свободно'\n    }\n];\n\nexport const TOKEN = 'token';\nexport const API_TOKEN = 'apiToken';\n"],"sourceRoot":""}